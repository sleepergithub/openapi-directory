{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://containeranalysis.googleapis.com/"
    }
  ],
  "x-hasEquivalentPaths": true,
  "info": {
    "contact": {
      "name": "Google",
      "url": "https://google.com",
      "x-twitter": "youtube"
    },
    "description": "An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts.",
    "license": {
      "name": "Creative Commons Attribution 3.0",
      "url": "http://creativecommons.org/licenses/by/3.0/"
    },
    "termsOfService": "https://developers.google.com/terms/",
    "title": "Container Analysis API",
    "version": "v1alpha1",
    "x-apiClientRegistration": {
      "url": "https://console.developers.google.com"
    },
    "x-apisguru-categories": [
      "analytics",
      "media"
    ],
    "x-logo": {
      "url": "https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png"
    },
    "x-origin": [
      {
        "converter": {
          "url": "https://github.com/mermade/oas-kit",
          "version": "7.0.4"
        },
        "format": "google",
        "url": "https://containeranalysis.googleapis.com/$discovery/rest?version=v1alpha1",
        "version": "v1"
      }
    ],
    "x-preferred": false,
    "x-providerName": "googleapis.com",
    "x-serviceName": "containeranalysis"
  },
  "externalDocs": {
    "url": "https://cloud.google.com/container-analysis/api/reference/rest/"
  },
  "tags": [
    {
      "name": "projects"
    },
    {
      "name": "providers"
    }
  ],
  "paths": {
    "/v1alpha1/{name}": {
      "delete": {
        "description": "Deletes the given `Note` from the system.",
        "operationId": "containeranalysis.providers.notes.delete",
        "parameters": [
          {
            "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\"",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "providers"
        ]
      },
      "get": {
        "description": "Returns the requested `Note`.",
        "operationId": "containeranalysis.providers.notes.get",
        "parameters": [
          {
            "description": "The name of the note in the form of \"providers/{provider_id}/notes/{NOTE_ID}\"",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "providers"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ],
      "patch": {
        "description": "Updates an existing `Note`.",
        "operationId": "containeranalysis.providers.notes.patch",
        "parameters": [
          {
            "description": "The name of the note. Should be of the form \"projects/{provider_id}/notes/{note_id}\".",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The fields to update.",
            "in": "query",
            "name": "updateMask",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "providers"
        ]
      }
    },
    "/v1alpha1/{name}/notes": {
      "get": {
        "description": "Lists all `Notes` for a given project.",
        "operationId": "containeranalysis.providers.notes.list",
        "parameters": [
          {
            "description": "The name field will contain the project Id for example: \"providers/{provider_id} @Deprecated",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filter expression.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of notes to return in the list.",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Token to provide to skip to a particular spot in the list.",
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This field contains the project Id for example: \"projects/{PROJECT_ID}\".",
            "in": "query",
            "name": "parent",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNotesResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "providers"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ],
      "post": {
        "description": "Creates a new `Note`.",
        "operationId": "containeranalysis.providers.notes.create",
        "parameters": [
          {
            "description": "The name of the project. Should be of the form \"providers/{provider_id}\". @Deprecated",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID to use for this note.",
            "in": "query",
            "name": "noteId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This field contains the project Id for example: \"projects/{project_id}",
            "in": "query",
            "name": "parent",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "providers"
        ]
      }
    },
    "/v1alpha1/{name}/occurrences": {
      "get": {
        "description": "Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects.",
        "operationId": "containeranalysis.providers.notes.occurrences.list",
        "parameters": [
          {
            "description": "The name field will contain the note name for example: \"provider/{provider_id}/notes/{note_id}\"",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filter expression.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of notes to return in the list.",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Token to provide to skip to a particular spot in the list.",
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNoteOccurrencesResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "providers"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ]
    },
    "/v1alpha1/{parent}/notes": {
      "get": {
        "description": "Lists all `Notes` for a given project.",
        "operationId": "containeranalysis.projects.notes.list",
        "parameters": [
          {
            "description": "This field contains the project Id for example: \"projects/{PROJECT_ID}\".",
            "in": "path",
            "name": "parent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filter expression.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name field will contain the project Id for example: \"providers/{provider_id} @Deprecated",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of notes to return in the list.",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Token to provide to skip to a particular spot in the list.",
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNotesResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ],
      "post": {
        "description": "Creates a new `Note`.",
        "operationId": "containeranalysis.projects.notes.create",
        "parameters": [
          {
            "description": "This field contains the project Id for example: \"projects/{project_id}",
            "in": "path",
            "name": "parent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the project. Should be of the form \"providers/{provider_id}\". @Deprecated",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID to use for this note.",
            "in": "query",
            "name": "noteId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Note"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1alpha1/{parent}/occurrences": {
      "get": {
        "description": "Lists active `Occurrences` for a given project matching the filters.",
        "operationId": "containeranalysis.projects.occurrences.list",
        "parameters": [
          {
            "description": "This contains the project Id for example: projects/{project_id}.",
            "in": "path",
            "name": "parent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filter expression.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The kind of occurrences to filter on.",
            "in": "query",
            "name": "kind",
            "schema": {
              "enum": [
                "KIND_UNSPECIFIED",
                "PACKAGE_VULNERABILITY",
                "BUILD_DETAILS",
                "IMAGE_BASIS",
                "PACKAGE_MANAGER",
                "DEPLOYABLE",
                "DISCOVERY",
                "ATTESTATION_AUTHORITY",
                "UPGRADE",
                "COMPLIANCE",
                "SBOM",
                "SPDX_PACKAGE",
                "SPDX_FILE",
                "SPDX_RELATIONSHIP",
                "DSSE_ATTESTATION"
              ],
              "type": "string"
            }
          },
          {
            "description": "The name field contains the project Id. For example: \"projects/{project_id} @Deprecated",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Number of occurrences to return in the list.",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Token to provide to skip to a particular spot in the list.",
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOccurrencesResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ],
      "post": {
        "description": "Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.",
        "operationId": "containeranalysis.projects.occurrences.create",
        "parameters": [
          {
            "description": "This field contains the project Id for example: \"projects/{project_id}\"",
            "in": "path",
            "name": "parent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the project. Should be of the form \"projects/{project_id}\". @Deprecated",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Occurrence"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Occurrence"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1alpha1/{parent}/occurrences:vulnerabilitySummary": {
      "get": {
        "description": "Gets a summary of the number and severity of occurrences.",
        "operationId": "containeranalysis.projects.occurrences.getVulnerabilitySummary",
        "parameters": [
          {
            "description": "This contains the project Id for example: projects/{project_id}",
            "in": "path",
            "name": "parent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filter expression.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetVulnzOccurrencesSummaryResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ]
    },
    "/v1alpha1/{parent}/operations": {
      "parameters": [
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ],
      "post": {
        "description": "Creates a new `Operation`.",
        "operationId": "containeranalysis.projects.operations.create",
        "parameters": [
          {
            "description": "The project Id that this operation should be created under.",
            "in": "path",
            "name": "parent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOperationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1alpha1/{parent}/scanConfigs": {
      "get": {
        "description": "Lists scan configurations for a project.",
        "operationId": "containeranalysis.projects.scanConfigs.list",
        "parameters": [
          {
            "description": "This containers the project Id i.e.: projects/{project_id}",
            "in": "path",
            "name": "parent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filter expression.",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of items to return.",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The page token to use for the next request.",
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListScanConfigsResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ]
    },
    "/v1alpha1/{resource}:getIamPolicy": {
      "parameters": [
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ],
      "post": {
        "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
        "operationId": "containeranalysis.providers.notes.getIamPolicy",
        "parameters": [
          {
            "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetIamPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "providers"
        ]
      }
    },
    "/v1alpha1/{resource}:setIamPolicy": {
      "parameters": [
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ],
      "post": {
        "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes",
        "operationId": "containeranalysis.providers.notes.setIamPolicy",
        "parameters": [
          {
            "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetIamPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "providers"
        ]
      }
    },
    "/v1alpha1/{resource}:testIamPermissions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/access_token"
        },
        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ],
      "post": {
        "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
        "operationId": "containeranalysis.providers.notes.testIamPermissions",
        "parameters": [
          {
            "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestIamPermissionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestIamPermissionsResponse"
                }
              }
            },
            "description": "Successful response"
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ],
            "Oauth2c": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "providers"
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "_.xgafv": {
        "description": "V1 error format.",
        "in": "query",
        "name": "$.xgafv",
        "schema": {
          "enum": [
            "1",
            "2"
          ],
          "type": "string"
        }
      },
      "access_token": {
        "description": "OAuth access token.",
        "in": "query",
        "name": "access_token",
        "schema": {
          "type": "string"
        }
      },
      "alt": {
        "description": "Data format for response.",
        "in": "query",
        "name": "alt",
        "schema": {
          "enum": [
            "json",
            "media",
            "proto"
          ],
          "type": "string"
        }
      },
      "callback": {
        "description": "JSONP",
        "in": "query",
        "name": "callback",
        "schema": {
          "type": "string"
        }
      },
      "fields": {
        "description": "Selector specifying which fields to include in a partial response.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "key": {
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
        "in": "query",
        "name": "key",
        "schema": {
          "type": "string"
        }
      },
      "oauth_token": {
        "description": "OAuth 2.0 token for the current user.",
        "in": "query",
        "name": "oauth_token",
        "schema": {
          "type": "string"
        }
      },
      "prettyPrint": {
        "description": "Returns response with indentations and line breaks.",
        "in": "query",
        "name": "prettyPrint",
        "schema": {
          "type": "boolean"
        }
      },
      "quotaUser": {
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
        "in": "query",
        "name": "quotaUser",
        "schema": {
          "type": "string"
        }
      },
      "uploadType": {
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
        "in": "query",
        "name": "uploadType",
        "schema": {
          "type": "string"
        }
      },
      "upload_protocol": {
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
        "in": "query",
        "name": "upload_protocol",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "Artifact": {
        "description": "Artifact describes a build product.",
        "properties": {
          "checksum": {
            "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.",
            "type": "string"
          },
          "id": {
            "description": "Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456",
            "type": "string"
          },
          "name": {
            "description": "Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.",
            "type": "string"
          },
          "names": {
            "description": "Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Attestation": {
        "description": "Occurrence that represents a single \"attestation\". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).",
        "properties": {
          "pgpSignedAttestation": {
            "$ref": "#/components/schemas/PgpSignedAttestation"
          }
        },
        "type": "object"
      },
      "AttestationAuthority": {
        "description": "Note kind that represents a logical attestation \"role\" or \"authority\". For example, an organization might have one `AttestationAuthority` for \"QA\" and one for \"build\". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.",
        "properties": {
          "hint": {
            "$ref": "#/components/schemas/AttestationAuthorityHint"
          }
        },
        "type": "object"
      },
      "AttestationAuthorityHint": {
        "description": "This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.",
        "properties": {
          "humanReadableName": {
            "description": "The human readable name of this Attestation Authority, for example \"qa\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Basis": {
        "description": "Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.",
        "properties": {
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint",
            "description": "The fingerprint of the base image."
          },
          "resourceUrl": {
            "description": "The resource_url for the resource representing the basis of associated occurrence images.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Binding": {
        "description": "Associates `members` with a `role`.",
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/Expr",
            "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
          },
          "members": {
            "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. ",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "role": {
            "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildDetails": {
        "description": "Message encapsulating build provenance details.",
        "properties": {
          "intotoProvenance": {
            "$ref": "#/components/schemas/InTotoProvenance",
            "description": "In-toto Provenance representation as defined in spec."
          },
          "provenance": {
            "$ref": "#/components/schemas/BuildProvenance",
            "description": "The actual provenance"
          },
          "provenanceBytes": {
            "description": "Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildProvenance": {
        "description": "Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.",
        "properties": {
          "buildOptions": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.",
            "type": "object"
          },
          "builderVersion": {
            "description": "Version string of the builder at the time this build was executed.",
            "type": "string"
          },
          "builtArtifacts": {
            "description": "Output of the build.",
            "items": {
              "$ref": "#/components/schemas/Artifact"
            },
            "type": "array"
          },
          "commands": {
            "description": "Commands requested by the build.",
            "items": {
              "$ref": "#/components/schemas/Command"
            },
            "type": "array"
          },
          "createTime": {
            "description": "Time at which the build was created.",
            "format": "google-datetime",
            "type": "string"
          },
          "creator": {
            "description": "E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.",
            "type": "string"
          },
          "finishTime": {
            "description": "Time at which execution of the build was finished.",
            "format": "google-datetime",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the build.",
            "type": "string"
          },
          "logsBucket": {
            "description": "Google Cloud Storage bucket where logs were written.",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project.",
            "type": "string"
          },
          "sourceProvenance": {
            "$ref": "#/components/schemas/Source",
            "description": "Details of the Source input to the build."
          },
          "startTime": {
            "description": "Time at which execution of the build was started.",
            "format": "google-datetime",
            "type": "string"
          },
          "triggerId": {
            "description": "Trigger identifier if the build was triggered automatically; empty if not.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildSignature": {
        "description": "Message encapsulating the signature of the verified build.",
        "properties": {
          "keyId": {
            "description": "An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).",
            "type": "string"
          },
          "keyType": {
            "description": "The type of the key, either stored in `public_key` or referenced in `key_id`",
            "enum": [
              "KEY_TYPE_UNSPECIFIED",
              "PGP_ASCII_ARMORED",
              "PKIX_PEM"
            ],
            "type": "string"
          },
          "publicKey": {
            "description": "Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`",
            "type": "string"
          },
          "signature": {
            "description": "Signature of the related `BuildProvenance`, encoded in a base64 string.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildType": {
        "description": "Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.",
        "properties": {
          "builderVersion": {
            "description": "Version of the builder which produced this Note.",
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/BuildSignature",
            "description": "Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`."
          }
        },
        "type": "object"
      },
      "BuilderConfig": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CisBenchmark": {
        "description": "A compliance check that is a CIS benchmark.",
        "properties": {
          "profileLevel": {
            "description": "The profile level of this CIS benchmark check.",
            "format": "int32",
            "type": "integer"
          },
          "severity": {
            "description": "The severity level of this CIS benchmark check.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Command": {
        "description": "Command describes a step performed as part of the build pipeline.",
        "properties": {
          "args": {
            "description": "Command-line arguments used when executing this Command.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dir": {
            "description": "Working directory (relative to project source root) used when running this Command.",
            "type": "string"
          },
          "env": {
            "description": "Environment variables set before running this Command.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.",
            "type": "string"
          },
          "name": {
            "description": "Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.",
            "type": "string"
          },
          "waitFor": {
            "description": "The ID(s) of the Command(s) that this Command depends on.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Completeness": {
        "description": "Indicates that the builder claims certain fields in this message to be complete.",
        "properties": {
          "arguments": {
            "description": "If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
            "type": "boolean"
          },
          "environment": {
            "description": "If true, the builder claims that recipe.environment is claimed to be complete.",
            "type": "boolean"
          },
          "materials": {
            "description": "If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\".",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ComplianceNote": {
        "description": "ComplianceNote encapsulates all information about a specific compliance check.",
        "properties": {
          "cisBenchmark": {
            "$ref": "#/components/schemas/CisBenchmark",
            "description": "Right now we only have one compliance type, but we may add additional types in the future."
          },
          "description": {
            "description": "A description about this compliance check.",
            "type": "string"
          },
          "rationale": {
            "description": "A rationale for the existence of this compliance check.",
            "type": "string"
          },
          "remediation": {
            "description": "A description of remediation steps if the compliance check fails.",
            "type": "string"
          },
          "scanInstructions": {
            "description": "Serialized scan instructions with a predefined format.",
            "format": "byte",
            "type": "string"
          },
          "title": {
            "description": "The title that identifies this compliance check.",
            "type": "string"
          },
          "version": {
            "description": "The OS and config versions the benchmark applies to.",
            "items": {
              "$ref": "#/components/schemas/ComplianceVersion"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ComplianceOccurrence": {
        "description": "An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.",
        "properties": {
          "nonComplianceReason": {
            "description": "The reason for non compliance of these files.",
            "type": "string"
          },
          "nonCompliantFiles": {
            "description": "A list of files which are violating compliance checks.",
            "items": {
              "$ref": "#/components/schemas/NonCompliantFile"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ComplianceVersion": {
        "description": "Describes the CIS benchmark version that is applicable to a given OS and os version.",
        "properties": {
          "cpeUri": {
            "description": "The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.",
            "type": "string"
          },
          "version": {
            "description": "The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateOperationRequest": {
        "description": "Request for creating an operation",
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/Operation",
            "description": "The operation to create."
          },
          "operationId": {
            "description": "The ID to use for this operation.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DSSEAttestationNote": {
        "description": "A note describing an attestation",
        "properties": {
          "hint": {
            "$ref": "#/components/schemas/DSSEHint",
            "description": "DSSEHint hints at the purpose of the attestation authority."
          }
        },
        "type": "object"
      },
      "DSSEAttestationOccurrence": {
        "description": "An occurrence describing an attestation on a resource",
        "properties": {
          "envelope": {
            "$ref": "#/components/schemas/Envelope",
            "description": "If doing something security critical, make sure to verify the signatures in this metadata."
          },
          "statement": {
            "$ref": "#/components/schemas/InTotoStatement"
          }
        },
        "type": "object"
      },
      "DSSEHint": {
        "description": "This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.",
        "properties": {
          "humanReadableName": {
            "description": "Required. The human readable name of this attestation authority, for example \"cloudbuild-prod\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Deployable": {
        "description": "An artifact that can be deployed in some runtime.",
        "properties": {
          "resourceUri": {
            "description": "Resource URI for the artifact being deployed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Deployment": {
        "description": "The period during which some deployable was active in a runtime.",
        "properties": {
          "address": {
            "description": "Address of the runtime element hosting this deployment.",
            "type": "string"
          },
          "config": {
            "description": "Configuration used to create this deployment.",
            "type": "string"
          },
          "deployTime": {
            "description": "Beginning of the lifetime of this deployment.",
            "format": "google-datetime",
            "type": "string"
          },
          "platform": {
            "description": "Platform hosting this deployment.",
            "enum": [
              "PLATFORM_UNSPECIFIED",
              "GKE",
              "FLEX",
              "CUSTOM"
            ],
            "type": "string"
          },
          "resourceUri": {
            "description": "Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "undeployTime": {
            "description": "End of the lifetime of this deployment.",
            "format": "google-datetime",
            "type": "string"
          },
          "userEmail": {
            "description": "Identity of the user that triggered this deployment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Derived": {
        "description": "Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .",
        "properties": {
          "baseResourceUrl": {
            "description": "Output only. This contains the base image URL for the derived image occurrence.",
            "type": "string"
          },
          "distance": {
            "description": "Output only. The number of layers by which this image differs from the associated image basis.",
            "format": "uint32",
            "type": "integer"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint",
            "description": "The fingerprint of the derived image."
          },
          "layerInfo": {
            "description": "This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.",
            "items": {
              "$ref": "#/components/schemas/Layer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Detail": {
        "description": "Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2",
        "properties": {
          "cpeUri": {
            "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.",
            "type": "string"
          },
          "description": {
            "description": "A vendor-specific description of this note.",
            "type": "string"
          },
          "fixedLocation": {
            "$ref": "#/components/schemas/VulnerabilityLocation",
            "description": "The fix for this specific package version."
          },
          "isObsolete": {
            "description": "Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.",
            "type": "boolean"
          },
          "maxAffectedVersion": {
            "$ref": "#/components/schemas/Version",
            "description": "The max version of the package in which the vulnerability exists."
          },
          "minAffectedVersion": {
            "$ref": "#/components/schemas/Version",
            "description": "The min version of the package in which the vulnerability exists."
          },
          "package": {
            "description": "The name of the package where the vulnerability was found. This field can be used as a filter in list requests.",
            "type": "string"
          },
          "packageType": {
            "description": "The type of package; whether native or non native(ruby gems, node.js packages etc)",
            "type": "string"
          },
          "severityName": {
            "description": "The severity (eg: distro assigned severity) for this vulnerability.",
            "type": "string"
          },
          "source": {
            "description": "The source from which the information in this Detail was obtained.",
            "type": "string"
          },
          "vendor": {
            "description": "The vendor of the product. e.g. \"google\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Discovered": {
        "description": "Provides information about the scan status of a discovered resource.",
        "properties": {
          "analysisStatus": {
            "description": "The status of discovery for the resource.",
            "enum": [
              "ANALYSIS_STATUS_UNSPECIFIED",
              "PENDING",
              "SCANNING",
              "FINISHED_SUCCESS",
              "FINISHED_FAILED",
              "FINISHED_UNSUPPORTED"
            ],
            "type": "string"
          },
          "analysisStatusError": {
            "$ref": "#/components/schemas/Status",
            "description": "When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API."
          },
          "continuousAnalysis": {
            "description": "Whether the resource is continuously analyzed.",
            "enum": [
              "CONTINUOUS_ANALYSIS_UNSPECIFIED",
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          },
          "cpe": {
            "description": "The CPE of the resource being scanned.",
            "type": "string"
          },
          "operation": {
            "$ref": "#/components/schemas/Operation",
            "description": "Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use."
          }
        },
        "type": "object"
      },
      "Discovery": {
        "description": "A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.",
        "properties": {
          "analysisKind": {
            "description": "The kind of analysis that is handled by this discovery.",
            "enum": [
              "KIND_UNSPECIFIED",
              "PACKAGE_VULNERABILITY",
              "BUILD_DETAILS",
              "IMAGE_BASIS",
              "PACKAGE_MANAGER",
              "DEPLOYABLE",
              "DISCOVERY",
              "ATTESTATION_AUTHORITY",
              "UPGRADE",
              "COMPLIANCE",
              "SBOM",
              "SPDX_PACKAGE",
              "SPDX_FILE",
              "SPDX_RELATIONSHIP",
              "DSSE_ATTESTATION"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Distribution": {
        "description": "This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror",
        "properties": {
          "architecture": {
            "description": "The CPU architecture for which packages in this distribution channel were built",
            "enum": [
              "ARCHITECTURE_UNSPECIFIED",
              "X86",
              "X64"
            ],
            "type": "string"
          },
          "cpeUri": {
            "description": "The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.",
            "type": "string"
          },
          "description": {
            "description": "The distribution channel-specific description of this package.",
            "type": "string"
          },
          "latestVersion": {
            "$ref": "#/components/schemas/Version",
            "description": "The latest available version of this package in this distribution channel."
          },
          "maintainer": {
            "description": "A freeform string denoting the maintainer of this package.",
            "type": "string"
          },
          "url": {
            "description": "The distribution channel-specific homepage for this package.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentNote": {
        "description": "DocumentNote represents an SPDX Document Creation Infromation section: https://spdx.github.io/spdx-spec/2-document-creation-information/",
        "properties": {
          "dataLicence": {
            "description": "Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields (\"SPDX-Metadata\")",
            "type": "string"
          },
          "spdxVersion": {
            "description": "Provide a reference number that can be used to understand how to parse and interpret the rest of the file",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentOccurrence": {
        "description": "DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/",
        "properties": {
          "createTime": {
            "description": "Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard",
            "format": "google-datetime",
            "type": "string"
          },
          "creatorComment": {
            "description": "A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields",
            "type": "string"
          },
          "creators": {
            "description": "Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "documentComment": {
            "description": "A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document",
            "type": "string"
          },
          "externalDocumentRefs": {
            "description": "Identify any external SPDX documents referenced within this SPDX document",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally",
            "type": "string"
          },
          "licenseListVersion": {
            "description": "A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created",
            "type": "string"
          },
          "namespace": {
            "description": "Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter",
            "type": "string"
          },
          "title": {
            "description": "Identify name of this document as designated by creator",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Empty": {
        "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
        "properties": {},
        "type": "object"
      },
      "Envelope": {
        "description": "MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.",
        "properties": {
          "payload": {
            "description": "The bytes being signed",
            "format": "byte",
            "type": "string"
          },
          "payloadType": {
            "description": "The type of payload being signed",
            "type": "string"
          },
          "signatures": {
            "description": "The signatures over the payload",
            "items": {
              "$ref": "#/components/schemas/EnvelopeSignature"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnvelopeSignature": {
        "description": "A DSSE signature",
        "properties": {
          "keyid": {
            "description": "A reference id to the key being used for signing",
            "type": "string"
          },
          "sig": {
            "description": "The signature itself",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Expr": {
        "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
        "properties": {
          "description": {
            "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
            "type": "string"
          },
          "expression": {
            "description": "Textual representation of an expression in Common Expression Language syntax.",
            "type": "string"
          },
          "location": {
            "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
            "type": "string"
          },
          "title": {
            "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExternalRef": {
        "description": "An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package",
        "properties": {
          "category": {
            "description": "An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package",
            "enum": [
              "CATEGORY_UNSPECIFIED",
              "SECURITY",
              "PACKAGE_MANAGER",
              "PERSISTENT_ID",
              "OTHER"
            ],
            "type": "string"
          },
          "comment": {
            "description": "Human-readable information about the purpose and target of the reference",
            "type": "string"
          },
          "locator": {
            "description": "The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location",
            "type": "string"
          },
          "type": {
            "description": "Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileHashes": {
        "description": "Container message for hashes of byte content of files, used in Source messages to verify integrity of source input to the build.",
        "properties": {
          "fileHash": {
            "description": "Collection of file hashes.",
            "items": {
              "$ref": "#/components/schemas/Hash"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FileNote": {
        "description": "FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/",
        "properties": {
          "checksum": {
            "description": "Provide a unique identifier to match analysis information on each specific file in a package",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fileType": {
            "description": "This field provides information about the type of file identified",
            "enum": [
              "FILE_TYPE_UNSPECIFIED",
              "SOURCE",
              "BINARY",
              "ARCHIVE",
              "APPLICATION",
              "AUDIO",
              "IMAGE",
              "TEXT",
              "VIDEO",
              "DOCUMENTATION",
              "SPDX",
              "OTHER"
            ],
            "type": "string"
          },
          "title": {
            "description": "Identify the full path and filename that corresponds to the file information in this section",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileOccurrence": {
        "description": "FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/",
        "properties": {
          "attributions": {
            "description": "This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "comment": {
            "description": "This field provides a place for the SPDX file creator to record any general comments about the file",
            "type": "string"
          },
          "contributors": {
            "description": "This field provides a place for the SPDX file creator to record file contributors",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "copyright": {
            "description": "Identify the copyright holder of the file, as well as any dates present",
            "type": "string"
          },
          "filesLicenseInfo": {
            "description": "This field contains the license information actually found in the file, if any",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Uniquely identify any element in an SPDX document which may be referenced by other elements",
            "type": "string"
          },
          "licenseComments": {
            "description": "This field provides a place for the SPDX file creator to record any relevant background references or analysis that went in to arriving at the Concluded License for a file",
            "type": "string"
          },
          "licenseConcluded": {
            "description": "This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined",
            "type": "string"
          },
          "notice": {
            "description": "This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Fingerprint": {
        "description": "A set of properties that uniquely identify a given Docker image.",
        "properties": {
          "v1Name": {
            "description": "The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.",
            "type": "string"
          },
          "v2Blob": {
            "description": "The ordered list of v2 blobs that represent a given image.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "v2Name": {
            "description": "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetIamPolicyRequest": {
        "description": "Request message for `GetIamPolicy` method.",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/GetPolicyOptions",
            "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`."
          }
        },
        "type": "object"
      },
      "GetPolicyOptions": {
        "description": "Encapsulates settings provided to GetIamPolicy.",
        "properties": {
          "requestedPolicyVersion": {
            "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GetVulnzOccurrencesSummaryResponse": {
        "description": "A summary of how many vulnz occurrences there are per severity type. counts by groups, or if we should have different summary messages like this.",
        "properties": {
          "counts": {
            "description": "A map of how many occurrences were found for each severity.",
            "items": {
              "$ref": "#/components/schemas/SeverityCount"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1AliasContext": {
        "description": "An alias to a repo revision.",
        "properties": {
          "kind": {
            "description": "The alias kind.",
            "enum": [
              "KIND_UNSPECIFIED",
              "FIXED",
              "MOVABLE",
              "OTHER"
            ],
            "type": "string"
          },
          "name": {
            "description": "The alias name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext": {
        "description": "A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.",
        "properties": {
          "aliasContext": {
            "$ref": "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1AliasContext",
            "description": "An alias, which may be a branch or tag."
          },
          "repoId": {
            "$ref": "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1RepoId",
            "description": "The ID of the repo."
          },
          "revisionId": {
            "description": "A revision ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext": {
        "description": "A SourceContext referring to a Gerrit project.",
        "properties": {
          "aliasContext": {
            "$ref": "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1AliasContext",
            "description": "An alias, which may be a branch or tag."
          },
          "gerritProject": {
            "description": "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.",
            "type": "string"
          },
          "hostUri": {
            "description": "The URI of a running Gerrit instance.",
            "type": "string"
          },
          "revisionId": {
            "description": "A revision (commit) ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext": {
        "description": "A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).",
        "properties": {
          "revisionId": {
            "description": "Required. Git commit hash.",
            "type": "string"
          },
          "url": {
            "description": "Git repository URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata": {
        "description": "Metadata for all operations used and required for all operations that created by Container Analysis Providers",
        "properties": {
          "createTime": {
            "description": "Output only. The time this operation was created.",
            "format": "google-datetime",
            "type": "string"
          },
          "endTime": {
            "description": "Output only. The time that this operation was marked completed or failed.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId": {
        "description": "Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.",
        "properties": {
          "projectId": {
            "description": "The ID of the project.",
            "type": "string"
          },
          "repoName": {
            "description": "The name of the repo. Leave empty for the default repo.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1RepoId": {
        "description": "A unique identifier for a Cloud Repo.",
        "properties": {
          "projectRepoId": {
            "$ref": "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId",
            "description": "A combination of a project ID and a repo name."
          },
          "uid": {
            "description": "A server-assigned, globally unique identifier.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1SourceContext": {
        "description": "A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.",
        "properties": {
          "cloudRepo": {
            "$ref": "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext",
            "description": "A SourceContext referring to a revision in a Google Cloud Source Repo."
          },
          "gerrit": {
            "$ref": "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext",
            "description": "A SourceContext referring to a Gerrit project."
          },
          "git": {
            "$ref": "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext",
            "description": "A SourceContext referring to any third party Git repo (e.g., GitHub)."
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels with user defined metadata.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "Hash": {
        "description": "Container message for hash values.",
        "properties": {
          "type": {
            "description": "The type of hash that was performed.",
            "enum": [
              "NONE",
              "SHA256"
            ],
            "type": "string"
          },
          "value": {
            "description": "The hash value.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InTotoProvenance": {
        "properties": {
          "builderConfig": {
            "$ref": "#/components/schemas/BuilderConfig",
            "description": "required"
          },
          "materials": {
            "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "recipe": {
            "$ref": "#/components/schemas/Recipe",
            "description": "Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required"
          }
        },
        "type": "object"
      },
      "InTotoStatement": {
        "description": "Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \"application/vnd.in-toto+json\".",
        "properties": {
          "predicateType": {
            "description": "\"https://in-toto.io/Provenance/v0.1\" for InTotoProvenance.",
            "type": "string"
          },
          "provenance": {
            "$ref": "#/components/schemas/InTotoProvenance"
          },
          "subject": {
            "items": {
              "$ref": "#/components/schemas/Subject"
            },
            "type": "array"
          },
          "type": {
            "description": "Always \"https://in-toto.io/Statement/v0.1\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Installation": {
        "description": "This represents how a particular software package may be installed on a system.",
        "properties": {
          "location": {
            "description": "All of the places within the filesystem versions of this package have been found.",
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "type": "array"
          },
          "name": {
            "description": "Output only. The name of the installed package.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Layer": {
        "description": "Layer holds metadata specific to a layer of a Docker image.",
        "properties": {
          "arguments": {
            "description": "The recovered arguments to the Dockerfile directive.",
            "type": "string"
          },
          "directive": {
            "description": "The recovered Dockerfile directive used to construct this layer.",
            "enum": [
              "DIRECTIVE_UNSPECIFIED",
              "MAINTAINER",
              "RUN",
              "CMD",
              "LABEL",
              "EXPOSE",
              "ENV",
              "ADD",
              "COPY",
              "ENTRYPOINT",
              "VOLUME",
              "USER",
              "WORKDIR",
              "ARG",
              "ONBUILD",
              "STOPSIGNAL",
              "HEALTHCHECK",
              "SHELL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ListNoteOccurrencesResponse": {
        "description": "Response including listed occurrences for a note.",
        "properties": {
          "nextPageToken": {
            "description": "Token to receive the next page of notes.",
            "type": "string"
          },
          "occurrences": {
            "description": "The occurrences attached to the specified note.",
            "items": {
              "$ref": "#/components/schemas/Occurrence"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ListNotesResponse": {
        "description": "Response including listed notes.",
        "properties": {
          "nextPageToken": {
            "description": "The next pagination token in the list response. It should be used as page_token for the following request. An empty value means no more result.",
            "type": "string"
          },
          "notes": {
            "description": "The occurrences requested",
            "items": {
              "$ref": "#/components/schemas/Note"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ListOccurrencesResponse": {
        "description": "Response including listed active occurrences.",
        "properties": {
          "nextPageToken": {
            "description": "The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.",
            "type": "string"
          },
          "occurrences": {
            "description": "The occurrences requested.",
            "items": {
              "$ref": "#/components/schemas/Occurrence"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ListScanConfigsResponse": {
        "description": "A list of scan configs for the project.",
        "properties": {
          "nextPageToken": {
            "description": "A page token to pass in order to get more scan configs.",
            "type": "string"
          },
          "scanConfigs": {
            "description": "The set of scan configs.",
            "items": {
              "$ref": "#/components/schemas/ScanConfig"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Location": {
        "description": "An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status",
        "properties": {
          "cpeUri": {
            "description": "The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.",
            "type": "string"
          },
          "path": {
            "description": "The path from which we gathered that this package/version is installed.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version",
            "description": "The version installed at this location."
          }
        },
        "type": "object"
      },
      "Metadata": {
        "description": "Other properties of the build.",
        "properties": {
          "buildFinishedOn": {
            "description": "The timestamp of when the build completed.",
            "format": "google-datetime",
            "type": "string"
          },
          "buildInvocationId": {
            "description": "Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.",
            "type": "string"
          },
          "buildStartedOn": {
            "description": "The timestamp of when the build started.",
            "format": "google-datetime",
            "type": "string"
          },
          "completeness": {
            "$ref": "#/components/schemas/Completeness",
            "description": "Indicates that the builder claims certain fields in this message to be complete."
          },
          "reproducible": {
            "description": "If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NonCompliantFile": {
        "description": "Details about files that caused a compliance check to fail.",
        "properties": {
          "displayCommand": {
            "description": "Command to display the non-compliant files.",
            "type": "string"
          },
          "path": {
            "description": "display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.",
            "type": "string"
          },
          "reason": {
            "description": "Explains why a file is non compliant for a CIS check.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Note": {
        "description": "Provides a detailed description of a `Note`.",
        "properties": {
          "attestationAuthority": {
            "$ref": "#/components/schemas/AttestationAuthority",
            "description": "A note describing an attestation role."
          },
          "baseImage": {
            "$ref": "#/components/schemas/Basis",
            "description": "A note describing a base image."
          },
          "buildType": {
            "$ref": "#/components/schemas/BuildType",
            "description": "Build provenance type for a verifiable build."
          },
          "compliance": {
            "$ref": "#/components/schemas/ComplianceNote",
            "description": "A note describing a compliance check."
          },
          "createTime": {
            "description": "Output only. The time this note was created. This field can be used as a filter in list requests.",
            "format": "google-datetime",
            "type": "string"
          },
          "deployable": {
            "$ref": "#/components/schemas/Deployable",
            "description": "A note describing something that can be deployed."
          },
          "discovery": {
            "$ref": "#/components/schemas/Discovery",
            "description": "A note describing a provider/analysis type."
          },
          "dsseAttestation": {
            "$ref": "#/components/schemas/DSSEAttestationNote",
            "description": "A note describing a dsse attestation note."
          },
          "expirationTime": {
            "description": "Time of expiration for this note, null if note does not expire.",
            "format": "google-datetime",
            "type": "string"
          },
          "kind": {
            "description": "Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.",
            "enum": [
              "KIND_UNSPECIFIED",
              "PACKAGE_VULNERABILITY",
              "BUILD_DETAILS",
              "IMAGE_BASIS",
              "PACKAGE_MANAGER",
              "DEPLOYABLE",
              "DISCOVERY",
              "ATTESTATION_AUTHORITY",
              "UPGRADE",
              "COMPLIANCE",
              "SBOM",
              "SPDX_PACKAGE",
              "SPDX_FILE",
              "SPDX_RELATIONSHIP",
              "DSSE_ATTESTATION"
            ],
            "type": "string"
          },
          "longDescription": {
            "description": "A detailed description of this `Note`.",
            "type": "string"
          },
          "name": {
            "description": "The name of the note in the form \"projects/{provider_project_id}/notes/{NOTE_ID}\"",
            "type": "string"
          },
          "package": {
            "$ref": "#/components/schemas/Package",
            "description": "A note describing a package hosted by various package managers."
          },
          "relatedUrl": {
            "description": "URLs associated with this note",
            "items": {
              "$ref": "#/components/schemas/RelatedUrl"
            },
            "type": "array"
          },
          "sbom": {
            "$ref": "#/components/schemas/DocumentNote",
            "description": "A note describing a software bill of materials."
          },
          "shortDescription": {
            "description": "A one sentence description of this `Note`.",
            "type": "string"
          },
          "spdxFile": {
            "$ref": "#/components/schemas/FileNote",
            "description": "A note describing an SPDX File."
          },
          "spdxPackage": {
            "$ref": "#/components/schemas/PackageNote",
            "description": "A note describing an SPDX Package."
          },
          "spdxRelationship": {
            "$ref": "#/components/schemas/RelationshipNote",
            "description": "A note describing a relationship between SPDX elements."
          },
          "updateTime": {
            "description": "Output only. The time this note was last updated. This field can be used as a filter in list requests.",
            "format": "google-datetime",
            "type": "string"
          },
          "upgrade": {
            "$ref": "#/components/schemas/UpgradeNote",
            "description": "A note describing an upgrade."
          },
          "vulnerabilityType": {
            "$ref": "#/components/schemas/VulnerabilityType",
            "description": "A package vulnerability type of note."
          }
        },
        "type": "object"
      },
      "Occurrence": {
        "description": "`Occurrence` includes information about analysis occurrences for an image.",
        "properties": {
          "attestation": {
            "$ref": "#/components/schemas/Attestation",
            "description": "Describes an attestation of an artifact."
          },
          "buildDetails": {
            "$ref": "#/components/schemas/BuildDetails",
            "description": "Build details for a verifiable build."
          },
          "compliance": {
            "$ref": "#/components/schemas/ComplianceOccurrence",
            "description": "Describes whether or not a resource passes compliance checks."
          },
          "createTime": {
            "description": "Output only. The time this `Occurrence` was created.",
            "format": "google-datetime",
            "type": "string"
          },
          "deployment": {
            "$ref": "#/components/schemas/Deployment",
            "description": "Describes the deployment of an artifact on a runtime."
          },
          "derivedImage": {
            "$ref": "#/components/schemas/Derived",
            "description": "Describes how this resource derives from the basis in the associated note."
          },
          "discovered": {
            "$ref": "#/components/schemas/Discovered",
            "description": "Describes the initial scan status for this resource."
          },
          "dsseAttestation": {
            "$ref": "#/components/schemas/DSSEAttestationOccurrence",
            "description": "This represents a DSSE attestation occurrence"
          },
          "envelope": {
            "$ref": "#/components/schemas/Envelope",
            "description": "https://github.com/secure-systems-lab/dsse"
          },
          "installation": {
            "$ref": "#/components/schemas/Installation",
            "description": "Describes the installation of a package on the linked resource."
          },
          "kind": {
            "description": "Output only. This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.",
            "enum": [
              "KIND_UNSPECIFIED",
              "PACKAGE_VULNERABILITY",
              "BUILD_DETAILS",
              "IMAGE_BASIS",
              "PACKAGE_MANAGER",
              "DEPLOYABLE",
              "DISCOVERY",
              "ATTESTATION_AUTHORITY",
              "UPGRADE",
              "COMPLIANCE",
              "SBOM",
              "SPDX_PACKAGE",
              "SPDX_FILE",
              "SPDX_RELATIONSHIP",
              "DSSE_ATTESTATION"
            ],
            "type": "string"
          },
          "name": {
            "description": "Output only. The name of the `Occurrence` in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
            "type": "string"
          },
          "noteName": {
            "description": "An analysis note associated with this image, in the form \"providers/{provider_id}/notes/{NOTE_ID}\" This field can be used as a filter in list requests.",
            "type": "string"
          },
          "remediation": {
            "description": "A description of actions that can be taken to remedy the `Note`",
            "type": "string"
          },
          "resource": {
            "$ref": "#/components/schemas/Resource",
            "description": " The resource for which the `Occurrence` applies."
          },
          "resourceUrl": {
            "description": "The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.",
            "type": "string"
          },
          "sbom": {
            "$ref": "#/components/schemas/DocumentOccurrence",
            "description": "Describes a specific software bill of materials document."
          },
          "spdxFile": {
            "$ref": "#/components/schemas/FileOccurrence",
            "description": "Describes a specific SPDX File."
          },
          "spdxPackage": {
            "$ref": "#/components/schemas/PackageOccurrence",
            "description": "Describes a specific SPDX Package."
          },
          "spdxRelationship": {
            "$ref": "#/components/schemas/RelationshipOccurrence",
            "description": "Describes a specific relationship between SPDX elements."
          },
          "updateTime": {
            "description": "Output only. The time this `Occurrence` was last updated.",
            "format": "google-datetime",
            "type": "string"
          },
          "upgrade": {
            "$ref": "#/components/schemas/UpgradeOccurrence",
            "description": "Describes an upgrade."
          },
          "vulnerabilityDetails": {
            "$ref": "#/components/schemas/VulnerabilityDetails",
            "description": "Details of a security vulnerability note."
          }
        },
        "type": "object"
      },
      "Operation": {
        "description": "This resource represents a long-running operation that is the result of a network API call.",
        "properties": {
          "done": {
            "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            "type": "boolean"
          },
          "error": {
            "$ref": "#/components/schemas/Status",
            "description": "The error result of the operation in case of failure or cancellation."
          },
          "metadata": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "type": "object"
          },
          "name": {
            "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "type": "string"
          },
          "response": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "Package": {
        "description": "This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.",
        "properties": {
          "distribution": {
            "description": "The various channels by which a package is distributed.",
            "items": {
              "$ref": "#/components/schemas/Distribution"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the package.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PackageIssue": {
        "description": "This message wraps a location affected by a vulnerability and its associated fix (if one is available).",
        "properties": {
          "affectedLocation": {
            "$ref": "#/components/schemas/VulnerabilityLocation",
            "description": "The location of the vulnerability."
          },
          "effectiveSeverity": {
            "description": "Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when distro or language system has not yet assigned a severity for this vulnerability.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "readOnly": true,
            "type": "string"
          },
          "fixedLocation": {
            "$ref": "#/components/schemas/VulnerabilityLocation",
            "description": "The location of the available fix for vulnerability."
          },
          "packageType": {
            "description": "The type of package (e.g. OS, MAVEN, GO).",
            "type": "string"
          },
          "severityName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PackageNote": {
        "description": "PackageNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/",
        "properties": {
          "analyzed": {
            "description": "Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document",
            "type": "boolean"
          },
          "attribution": {
            "description": "A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts",
            "type": "string"
          },
          "checksum": {
            "description": "Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file",
            "type": "string"
          },
          "copyright": {
            "description": "Identify the copyright holders of the package, as well as any dates present",
            "type": "string"
          },
          "detailedDescription": {
            "description": "A more detailed description of the package",
            "type": "string"
          },
          "downloadLocation": {
            "description": "This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created",
            "type": "string"
          },
          "externalRefs": {
            "description": "ExternalRef",
            "items": {
              "$ref": "#/components/schemas/ExternalRef"
            },
            "type": "array"
          },
          "filesLicenseInfo": {
            "description": "Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "homePage": {
            "description": "Provide a place for the SPDX file creator to record a web site that serves as the package's home page",
            "type": "string"
          },
          "licenseDeclared": {
            "description": "List the licenses that have been declared by the authors of the package",
            "type": "string"
          },
          "originator": {
            "description": "If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came",
            "type": "string"
          },
          "summaryDescription": {
            "description": "A short description of the package",
            "type": "string"
          },
          "supplier": {
            "description": "Identify the actual distribution source for the package/directory identified in the SPDX file",
            "type": "string"
          },
          "title": {
            "description": "Identify the full name of the package as given by the Package Originator",
            "type": "string"
          },
          "verificationCode": {
            "description": "This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file",
            "type": "string"
          },
          "version": {
            "description": "Identify the version of the package",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PackageOccurrence": {
        "description": "PackageOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/",
        "properties": {
          "comment": {
            "description": "A place for the SPDX file creator to record any general comments about the package being described",
            "type": "string"
          },
          "filename": {
            "description": "Provide the actual file name of the package, or path of the directory being treated as a package",
            "type": "string"
          },
          "id": {
            "description": "Uniquely identify any element in an SPDX document which may be referenced by other elements",
            "type": "string"
          },
          "licenseComments": {
            "description": "This field provides a place for the SPDX file creator to record any relevant background information or analysis that went in to arriving at the Concluded License for a package",
            "type": "string"
          },
          "licenseConcluded": {
            "description": "package or alternative values, if the governing license cannot be determined",
            "type": "string"
          },
          "sourceInfo": {
            "description": "Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PgpSignedAttestation": {
        "description": "An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.",
        "properties": {
          "contentType": {
            "description": "Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).",
            "enum": [
              "CONTENT_TYPE_UNSPECIFIED",
              "SIMPLE_SIGNING_JSON"
            ],
            "type": "string"
          },
          "pgpKeyId": {
            "description": "The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.",
            "type": "string"
          },
          "signature": {
            "description": "The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Policy": {
        "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
        "properties": {
          "bindings": {
            "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.",
            "items": {
              "$ref": "#/components/schemas/Binding"
            },
            "type": "array"
          },
          "etag": {
            "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
            "format": "byte",
            "type": "string"
          },
          "version": {
            "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Recipe": {
        "description": "Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
        "properties": {
          "arguments": {
            "description": "Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "definedInMaterial": {
            "description": "Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.",
            "format": "int64",
            "type": "string"
          },
          "entryPoint": {
            "description": "String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
            "type": "string"
          },
          "environment": {
            "description": "Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "type": {
            "description": "URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelatedUrl": {
        "description": "Metadata for any related URL information",
        "properties": {
          "label": {
            "description": "Label to describe usage of the URL",
            "type": "string"
          },
          "url": {
            "description": "Specific URL to associate with the note",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationshipNote": {
        "description": "RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/",
        "properties": {},
        "type": "object"
      },
      "RelationshipOccurrence": {
        "description": "RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/",
        "properties": {
          "comment": {
            "description": "A place for the SPDX file creator to record any general comments about the relationship",
            "type": "string"
          },
          "source": {
            "description": "Also referred to as SPDXRef-A The source SPDX element (file, package, etc)",
            "type": "string"
          },
          "target": {
            "description": "Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are \"known unknowns\", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it",
            "type": "string"
          },
          "type": {
            "description": "The type of relationship between the source and target SPDX elements",
            "enum": [
              "TYPE_UNSPECIFIED",
              "DESCRIBES",
              "DESCRIBED_BY",
              "CONTAINS",
              "CONTAINED_BY",
              "DEPENDS_ON",
              "DEPENDENCY_OF",
              "DEPENDENCY_MANIFEST_OF",
              "BUILD_DEPENDENCY_OF",
              "DEV_DEPENDENCY_OF",
              "OPTIONAL_DEPENDENCY_OF",
              "PROVIDED_DEPENDENCY_OF",
              "TEST_DEPENDENCY_OF",
              "RUNTIME_DEPENDENCY_OF",
              "EXAMPLE_OF",
              "GENERATES",
              "GENERATED_FROM",
              "ANCESTOR_OF",
              "DESCENDANT_OF",
              "VARIANT_OF",
              "DISTRIBUTION_ARTIFACT",
              "PATCH_FOR",
              "PATCH_APPLIED",
              "COPY_OF",
              "FILE_ADDED",
              "FILE_DELETED",
              "FILE_MODIFIED",
              "EXPANDED_FROM_ARCHIVE",
              "DYNAMIC_LINK",
              "STATIC_LINK",
              "DATA_FILE_OF",
              "TEST_CASE_OF",
              "BUILD_TOOL_OF",
              "DEV_TOOL_OF",
              "TEST_OF",
              "TEST_TOOL_OF",
              "DOCUMENTATION_OF",
              "OPTIONAL_COMPONENT_OF",
              "METAFILE_OF",
              "PACKAGE_OF",
              "AMENDS",
              "PREREQUISITE_FOR",
              "HAS_PREREQUISITE",
              "OTHER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoSource": {
        "description": "RepoSource describes the location of the source in a Google Cloud Source Repository.",
        "properties": {
          "branchName": {
            "description": "Name of the branch to build.",
            "type": "string"
          },
          "commitSha": {
            "description": "Explicit commit SHA to build.",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project that owns the repo.",
            "type": "string"
          },
          "repoName": {
            "description": "Name of the repo.",
            "type": "string"
          },
          "tagName": {
            "description": "Name of the tag to build.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Resource": {
        "description": " Resource is an entity that can have metadata. E.g., a Docker image.",
        "properties": {
          "contentHash": {
            "$ref": "#/components/schemas/Hash",
            "description": "The hash of the resource content. E.g., the Docker digest."
          },
          "name": {
            "description": "The name of the resource. E.g., the name of a Docker image - \"Debian\".",
            "type": "string"
          },
          "uri": {
            "description": "The unique URI of the resource. E.g., \"https://gcr.io/project/image@sha256:foo\" for a Docker image.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScanConfig": {
        "description": "Indicates various scans and whether they are turned on or off.",
        "properties": {
          "createTime": {
            "description": "Output only. The time this scan config was created.",
            "format": "google-datetime",
            "type": "string"
          },
          "description": {
            "description": "Output only. A human-readable description of what the `ScanConfig` does.",
            "type": "string"
          },
          "enabled": {
            "description": "Indicates whether the Scan is enabled.",
            "type": "boolean"
          },
          "name": {
            "description": "Output only. The name of the ScanConfig in the form “projects/{project_id}/scanConfigs/{scan_config_id}\".",
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time this scan config was last updated.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SetIamPolicyRequest": {
        "description": "Request message for `SetIamPolicy` method.",
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/Policy",
            "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them."
          }
        },
        "type": "object"
      },
      "SeverityCount": {
        "description": "The number of occurrences created for a specific severity.",
        "properties": {
          "count": {
            "description": "The number of occurrences with the severity.",
            "format": "int64",
            "type": "string"
          },
          "severity": {
            "description": "The severity of the occurrences.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Source": {
        "description": "Source describes the location of the source used for the build.",
        "properties": {
          "additionalContexts": {
            "description": "If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.",
            "items": {
              "$ref": "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SourceContext"
            },
            "type": "array"
          },
          "artifactStorageSource": {
            "$ref": "#/components/schemas/StorageSource",
            "description": "If provided, the input binary artifacts for the build came from this location."
          },
          "context": {
            "$ref": "#/components/schemas/GoogleDevtoolsContaineranalysisV1alpha1SourceContext",
            "description": "If provided, the source code used for the build came from this location."
          },
          "fileHashes": {
            "additionalProperties": {
              "$ref": "#/components/schemas/FileHashes"
            },
            "description": "Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.",
            "type": "object"
          },
          "repoSource": {
            "$ref": "#/components/schemas/RepoSource",
            "description": "If provided, get source from this location in a Cloud Repo."
          },
          "storageSource": {
            "$ref": "#/components/schemas/StorageSource",
            "description": "If provided, get the source from this location in in Google Cloud Storage."
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StorageSource": {
        "description": "StorageSource describes the location of the source in an archive file in Google Cloud Storage.",
        "properties": {
          "bucket": {
            "description": "Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
            "type": "string"
          },
          "generation": {
            "description": "Google Cloud Storage generation for the object.",
            "format": "int64",
            "type": "string"
          },
          "object": {
            "description": "Google Cloud Storage object containing source.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Subject": {
        "properties": {
          "digest": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "\"\": \"\"",
            "type": "object"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestIamPermissionsRequest": {
        "description": "Request message for `TestIamPermissions` method.",
        "properties": {
          "permissions": {
            "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TestIamPermissionsResponse": {
        "description": "Response message for `TestIamPermissions` method.",
        "properties": {
          "permissions": {
            "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateOperationRequest": {
        "description": "Request for updating an existing operation",
        "properties": {
          "operation": {
            "$ref": "#/components/schemas/Operation",
            "description": "The operation to create."
          },
          "updateMask": {
            "description": "The fields to update.",
            "format": "google-fieldmask",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpgradeDistribution": {
        "description": "The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.",
        "properties": {
          "classification": {
            "description": "The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.",
            "type": "string"
          },
          "cpeUri": {
            "description": "Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.",
            "type": "string"
          },
          "cve": {
            "description": "The cve that would be resolved by this upgrade.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "description": "The severity as specified by the upstream operating system.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpgradeNote": {
        "description": "An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.",
        "properties": {
          "distributions": {
            "description": "Metadata about the upgrade for each specific operating system.",
            "items": {
              "$ref": "#/components/schemas/UpgradeDistribution"
            },
            "type": "array"
          },
          "package": {
            "description": "Required - The package this Upgrade is for.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version",
            "description": "Required - The version of the package in machine + human readable form."
          }
        },
        "type": "object"
      },
      "UpgradeOccurrence": {
        "description": "An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).",
        "properties": {
          "distribution": {
            "$ref": "#/components/schemas/UpgradeDistribution",
            "description": "Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence."
          },
          "package": {
            "description": "Required - The package this Upgrade is for.",
            "type": "string"
          },
          "parsedVersion": {
            "$ref": "#/components/schemas/Version",
            "description": "Required - The version of the package in a machine + human readable form."
          }
        },
        "type": "object"
      },
      "Version": {
        "description": "Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/",
        "properties": {
          "epoch": {
            "description": "Used to correct mistakes in the version numbering scheme.",
            "format": "int32",
            "type": "integer"
          },
          "inclusive": {
            "description": "Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not",
            "type": "boolean"
          },
          "kind": {
            "description": "Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.",
            "enum": [
              "NORMAL",
              "MINIMUM",
              "MAXIMUM"
            ],
            "type": "string"
          },
          "name": {
            "description": "The main part of the version name.",
            "type": "string"
          },
          "revision": {
            "description": "The iteration of the package build from the above version.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VulnerabilityDetails": {
        "description": "Used by Occurrence to point to where the vulnerability exists and how to fix it.",
        "properties": {
          "cvssScore": {
            "description": "Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.",
            "format": "float",
            "type": "number"
          },
          "effectiveSeverity": {
            "description": "The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          },
          "packageIssue": {
            "description": "The set of affected locations and their fixes (if available) within the associated resource.",
            "items": {
              "$ref": "#/components/schemas/PackageIssue"
            },
            "type": "array"
          },
          "severity": {
            "description": "Output only. The note provider assigned Severity of the vulnerability.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          },
          "type": {
            "description": "The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VulnerabilityLocation": {
        "description": "The location of the vulnerability",
        "properties": {
          "cpeUri": {
            "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.",
            "type": "string"
          },
          "package": {
            "description": "The package being described.",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/Version",
            "description": "The version of the package being described. This field can be used as a filter in list requests."
          }
        },
        "type": "object"
      },
      "VulnerabilityType": {
        "description": "VulnerabilityType provides metadata about a security vulnerability.",
        "properties": {
          "cvssScore": {
            "description": "The CVSS score for this Vulnerability.",
            "format": "float",
            "type": "number"
          },
          "details": {
            "description": "All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.",
            "items": {
              "$ref": "#/components/schemas/Detail"
            },
            "type": "array"
          },
          "severity": {
            "description": "Note provider assigned impact of the vulnerability",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "Oauth2": {
        "description": "Oauth 2.0 implicit authentication",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
            "scopes": {
              "https://www.googleapis.com/auth/cloud-platform": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
            }
          }
        },
        "type": "oauth2"
      },
      "Oauth2c": {
        "description": "Oauth 2.0 authorizationCode authentication",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
            "scopes": {
              "https://www.googleapis.com/auth/cloud-platform": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
            },
            "tokenUrl": "https://accounts.google.com/o/oauth2/token"
          }
        },
        "type": "oauth2"
      }
    }
  }
}