{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.logoraisr.com/rest-v1"
    }
  ],
  "info": {
    "contact": {
      "email": "support@logoraisr.com",
      "url": "https://logoraisr.com"
    },
    "description": "<p style=\"font-size:110%;\">Dig into our logoraisr API reference documentation. We also offer an OpenAPI specification to allow easy integration into your systems. You can download the json file by clicking on the download button.<p><br><p style=\"font-size:110%; font-weight:bold\">OpenAPI 2.0 Validation Status</p><img src=\"https://online.swagger.io/validator?url=https://docs.logoraisr.com/\">",
    "termsOfService": "https://logoraisr.com/terms-conditions",
    "title": "API docs | logoraisr.com",
    "version": "v1",
    "x-apisguru-categories": [
      "media"
    ],
    "x-logo": {
      "backgroundColor": "#FFFFFF",
      "url": "https://api.apis.guru/v2/cache/logo/https_logoraisr.com_assets_images_content_logo_docs.png"
    },
    "x-origin": [
      {
        "format": "openapi",
        "url": "https://docs.logoraisr.com/swagger.json",
        "version": "3.0"
      }
    ],
    "x-providerName": "logoraisr.com"
  },
  "security": [
    {
      "Token": []
    }
  ],
  "paths": {
    "/previews/{file_id}/": {
      "get": {
        "description": "This GET-Method returns the URL where the preview image of uploaded file can downloaded from.",
        "operationId": "previews_read",
        "parameters": [
          {
            "description": "Id of the file for which the preview_img_url is generated.",
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "403": {
            "description": "FORBIDDEN"
          }
        },
        "summary": "Get preview image of uploaded file",
        "tags": [
          "previews"
        ],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X GET 'https://api.logoraisr.com/rest-v1/previews/{file_id}/' \\\n-H \"Authorization:Token your_api_key\" \\"
          },
          {
            "lang": "python",
            "source": "import requests\n\n\n\n# provide your API token here\nheaders = {'Authorization:Token your_api_key'}\n\n\nresp = request.get('https://api.logoraisr.com/rest-v1/previews/{file_id}/', headers=headers)\nprint(resp.json())"
          },
          {
            "lang": "node.js",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.logoraisr.com/rest-v1/previews/{file_id}/',\n  headers: {\n    'Authorization: Token your_api_key',\n\n  },\n\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/previews/{file_id}/\")\n.header(\"Authorization\", \"Token your_api_key\")\n\n\n.asString();"
          },
          {
            "lang": "php",
            "source": "$response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/previews/{file_id}/\",\n  array(\n    \"Authorization\" => \"Token your_api_key\"\n\n  ),\n  array(\n\n  );"
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "file_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/processes/": {
      "get": {
        "description": "This GET-Method lists all on logoraisr available processes.",
        "operationId": "processes_list",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Process"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get process list.",
        "tags": [
          "processes"
        ],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X GET 'https://api.logoraisr.com/rest-v1/processes/' \\\n-H \"Authorization:Token your_api_key\" \\"
          },
          {
            "lang": "python",
            "source": "import requests\n\n\n\n# provide your API token here\nheaders = {'Authorization:Token your_api_key'}\n\n\nresp = request.get('https://api.logoraisr.com/rest-v1/processes/', headers=headers)\nprint(resp.json())"
          },
          {
            "lang": "node.js",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.logoraisr.com/rest-v1/processes/',\n  headers: {\n    'Authorization: Token your_api_key',\n\n  },\n\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/processes/\")\n.header(\"Authorization\", \"Token your_api_key\")\n\n\n.asString();"
          },
          {
            "lang": "php",
            "source": "$response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/processes/\",\n  array(\n    \"Authorization\" => \"Token your_api_key\"\n\n  ),\n  array(\n\n  );"
          }
        ]
      },
      "parameters": []
    },
    "/projects/": {
      "get": {
        "description": "This GET-Method lists the user's projects.",
        "operationId": "projects_list",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": ""
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "404": {
            "description": "NOT FOUND"
          }
        },
        "summary": "Get user project list.",
        "tags": [
          "projects"
        ],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X GET 'https://api.logoraisr.com/rest-v1/projects/' \\\n-H \"Authorization:Token your_api_key\" \\ \n-H \"content-type:application/json\" \\\n -d processes=logo-super-resolution \\\n -d file_id=string \\\n -d project_title=string \\\n -d paid=true \\\n"
          },
          {
            "lang": "python",
            "source": "import requests\n\n\npayload = {'processes': 'logo-super-resolution', 'file_id': 'string', 'project_title': 'string', 'paid': 'true'}\n# provide your API token here\nheaders = {'Authorization:Token your_api_key', 'content-type : application/json'}\n\n\nresp = request.get('https://api.logoraisr.com/rest-v1/projects/', headers=headers)\nprint(resp.json())"
          },
          {
            "lang": "node.js",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.logoraisr.com/rest-v1/projects/',\n  headers: {\n    'Authorization: Token your_api_key',\n    'content-type: application/json',\n  },\n\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/projects/\")\n.header(\"Authorization\", \"Token your_api_key\")\n.header(\"content-type\", \"application/json\")\n.body({\"process\": \"l2v\", \"file_id\": \"00e49cf703184d8c9c6f75ca61547bce\", \"project_title\": \"rapid_api_test\"})\n.asString();"
          },
          {
            "lang": "php",
            "source": "$response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/projects/\",\n  array(\n    \"Authorization\" => \"Token your_api_key\"\n    \"content-type\" => \"application/json\"\n  ),\n  array(\n    {\"process\": \"l2v\", \"file_id\": \"00e49cf703184d8c9c6f75ca61547bce\", \"project_title\": \"rapid_api_test\"}\n  );"
          }
        ]
      },
      "parameters": [],
      "post": {
        "description": "This POST-Method creates a new project.",
        "operationId": "projects_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "404": {
            "description": "NOT FOUND"
          }
        },
        "summary": "Create a new project.",
        "tags": [
          "projects"
        ],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X POST 'https://api.logoraisr.com/rest-v1/projects/' \\\n-H \"Authorization:Token your_api_key\" \\ \n-H \"content-type:application/json\" \\\n -d processes=logo-super-resolution \\\n -d file_id=string \\\n -d project_title=string \\\n -d paid=true \\\n"
          },
          {
            "lang": "python",
            "source": "import requests\n\n\npayload = {'processes': 'logo-super-resolution', 'file_id': 'string', 'project_title': 'string', 'paid': 'true'}\n# provide your API token here\nheaders = {'Authorization:Token your_api_key', 'content-type : application/json'}\n\n\nresp = request.post('https://api.logoraisr.com/rest-v1/projects/', data=payload, headers=headers)\nprint(resp.json())"
          },
          {
            "lang": "node.js",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.logoraisr.com/rest-v1/projects/',\n  headers: {\n    'Authorization: Token your_api_key',\n    'content-type: application/json',\n  },\n\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.POST(\"https://api.logoraisr.com/rest-v1/projects/\")\n.header(\"Authorization\", \"Token your_api_key\")\n.header(\"content-type\", \"application/json\")\n.body({\"process\": \"l2v\", \"file_id\": \"00e49cf703184d8c9c6f75ca61547bce\", \"project_title\": \"rapid_api_test\"})\n.asString();"
          },
          {
            "lang": "php",
            "source": "$response = Unirest\\Request::POST(\"https://api.logoraisr.com/rest-v1/projects/\",\n  array(\n    \"Authorization\" => \"Token your_api_key\"\n    \"content-type\" => \"application/json\"\n  ),\n  array(\n    {\"process\": \"l2v\", \"file_id\": \"00e49cf703184d8c9c6f75ca61547bce\", \"project_title\": \"rapid_api_test\"}\n  );"
          }
        ]
      }
    },
    "/projects/{project_number}/": {
      "get": {
        "description": "This GET-Method returns a specific project.",
        "operationId": "projects_read",
        "parameters": [
          {
            "description": "Number of the project.",
            "in": "path",
            "name": "project_number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": ""
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "404": {
            "description": "NOT FOUND"
          }
        },
        "summary": "Get project details.",
        "tags": [
          "projects"
        ],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X GET 'https://api.logoraisr.com/rest-v1/projects/{project_number}/' \\\n-H \"Authorization:Token your_api_key\" \\"
          },
          {
            "lang": "python",
            "source": "import requests\n\n\n\n# provide your API token here\nheaders = {'Authorization:Token your_api_key'}\n\n\nresp = request.get('https://api.logoraisr.com/rest-v1/projects/{project_number}/', headers=headers)\nprint(resp.json())"
          },
          {
            "lang": "node.js",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.logoraisr.com/rest-v1/projects/{project_number}/',\n  headers: {\n    'Authorization: Token your_api_key',\n\n  },\n\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/projects/{project_number}/\")\n.header(\"Authorization\", \"Token your_api_key\")\n\n\n.asString();"
          },
          {
            "lang": "php",
            "source": "$response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/projects/{project_number}/\",\n  array(\n    \"Authorization\" => \"Token your_api_key\"\n\n  ),\n  array(\n\n  );"
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "project_number",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/reports/": {
      "get": {
        "description": "This GET method lists the user's reports.",
        "operationId": "reports_list",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            },
            "description": ""
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "404": {
            "description": "NOT FOUND"
          }
        },
        "summary": "Get user report list.",
        "tags": [
          "reports"
        ],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X GET 'https://api.logoraisr.com/rest-v1/reports/' \\\n-H \"Authorization:Token your_api_key\" \\"
          },
          {
            "lang": "python",
            "source": "import requests\n\n\n\n# provide your API token here\nheaders = {'Authorization:Token your_api_key'}\n\n\nresp = request.get('https://api.logoraisr.com/rest-v1/reports/', headers=headers)\nprint(resp.json())"
          },
          {
            "lang": "node.js",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.logoraisr.com/rest-v1/reports/',\n  headers: {\n    'Authorization: Token your_api_key',\n\n  },\n\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/reports/\")\n.header(\"Authorization\", \"Token your_api_key\")\n\n\n.asString();"
          },
          {
            "lang": "php",
            "source": "$response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/reports/\",\n  array(\n    \"Authorization\" => \"Token your_api_key\"\n\n  ),\n  array(\n\n  );"
          }
        ]
      },
      "parameters": [],
      "post": {
        "description": "This POST-Method creates a new report.",
        "operationId": "reports_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "401": {
            "description": "UNAUTHORIZED"
          },
          "403": {
            "description": "FORBIDDEN"
          }
        },
        "summary": "Create a new report.",
        "tags": [
          "reports"
        ],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X POST 'https://api.logoraisr.com/rest-v1/reports/' \\\n-H \"Authorization:Token your_api_key\" \\"
          },
          {
            "lang": "python",
            "source": "import requests\n\n\n\n# provide your API token here\nheaders = {'Authorization:Token your_api_key'}\n\n\n\nprint(resp.json())"
          },
          {
            "lang": "node.js",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.logoraisr.com/rest-v1/reports/',\n  headers: {\n    'Authorization: Token your_api_key',\n\n  },\n\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.POST(\"https://api.logoraisr.com/rest-v1/reports/\")\n.header(\"Authorization\", \"Token your_api_key\")\n\n\n.asString();"
          },
          {
            "lang": "php",
            "source": "$response = Unirest\\Request::POST(\"https://api.logoraisr.com/rest-v1/reports/\",\n  array(\n    \"Authorization\" => \"Token your_api_key\"\n\n  ),\n  array(\n\n  );"
          }
        ]
      }
    },
    "/reports/{report_number}/": {
      "get": {
        "description": "This GET-Method returns the details of a specific report.",
        "operationId": "reports_read",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            },
            "description": ""
          },
          "403": {
            "description": "FORBIDDEN"
          },
          "404": {
            "description": "NOT FOUND"
          }
        },
        "summary": "Get report details.",
        "tags": [
          "reports"
        ],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X GET 'https://api.logoraisr.com/rest-v1/reports/{report_number}/' \\\n-H \"Authorization:Token your_api_key\" \\"
          },
          {
            "lang": "python",
            "source": "import requests\n\n\n\n# provide your API token here\nheaders = {'Authorization:Token your_api_key'}\n\n\nresp = request.get('https://api.logoraisr.com/rest-v1/reports/{report_number}/', headers=headers)\nprint(resp.json())"
          },
          {
            "lang": "node.js",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.logoraisr.com/rest-v1/reports/{report_number}/',\n  headers: {\n    'Authorization: Token your_api_key',\n\n  },\n\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/reports/{report_number}/\")\n.header(\"Authorization\", \"Token your_api_key\")\n\n\n.asString();"
          },
          {
            "lang": "php",
            "source": "$response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/reports/{report_number}/\",\n  array(\n    \"Authorization\" => \"Token your_api_key\"\n\n  ),\n  array(\n\n  );"
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "report_number",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/results/{result_file_id}/": {
      "get": {
        "description": "This GET-Method returns the URL where the result can downloaded from.",
        "operationId": "results_read",
        "parameters": [
          {
            "description": "Id of the result_file for which the result_file_url is generated.",
            "in": "path",
            "name": "result_file_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "403": {
            "description": "FORBIDDEN"
          }
        },
        "summary": "Get the result from image processing",
        "tags": [
          "results"
        ],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X GET 'https://api.logoraisr.com/rest-v1/results/{result_file_id}/' \\\n-H \"Authorization:Token your_api_key\" \\"
          },
          {
            "lang": "python",
            "source": "import requests\n\n\n\n# provide your API token here\nheaders = {'Authorization:Token your_api_key'}\n\n\nresp = request.get('https://api.logoraisr.com/rest-v1/results/{result_file_id}/', headers=headers)\nprint(resp.json())"
          },
          {
            "lang": "node.js",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'https://api.logoraisr.com/rest-v1/results/{result_file_id}/',\n  headers: {\n    'Authorization: Token your_api_key',\n\n  },\n\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.GET(\"https://api.logoraisr.com/rest-v1/results/{result_file_id}/\")\n.header(\"Authorization\", \"Token your_api_key\")\n\n\n.asString();"
          },
          {
            "lang": "php",
            "source": "$response = Unirest\\Request::GET(\"https://api.logoraisr.com/rest-v1/results/{result_file_id}/\",\n  array(\n    \"Authorization\" => \"Token your_api_key\"\n\n  ),\n  array(\n\n  );"
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "result_file_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/uploads/": {
      "parameters": [],
      "post": {
        "description": "This POST-Method uploads a new file on the server.",
        "operationId": "uploads_create",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "description": "File which should be uploaded. Supported file types are: JPEG and PNG",
                    "format": "binary",
                    "type": "string"
                  }
                },
                "required": [
                  "file"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "BAD REQUEST"
          }
        },
        "summary": "Upload a new image",
        "tags": [
          "uploads"
        ],
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl -X POST 'https://api.logoraisr.com/rest-v1/uploads/' \\\n-H \"Authorization:Token your_api_key\" \\\n-F '@/path/to/your/logo.png'  \\"
          },
          {
            "lang": "python",
            "source": "import requests\n\nfiles = '/path/to/your/logo.png'\n\n# provide your API token here\nheaders = {'Authorization:Token your_api_key'}\n\n\nresp = request.post('https://api.logoraisr.com/rest-v1/uploads/', files=files, headers=headers)\nprint(resp.json())"
          },
          {
            "lang": "node.js",
            "source": "var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'https://api.logoraisr.com/rest-v1/uploads/',\n  headers: {\n    'Authorization: Token your_api_key',\n\n  },\n  formData: {file: {value: {'/path/to/your/logo.png'}}}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "java",
            "source": "HttpResponse<String> response = Unirest.POST(\"https://api.logoraisr.com/rest-v1/uploads/\")\n.header(\"Authorization\", \"Token your_api_key\")\n\n.field(\"upload\", new File(\"/path/to/your/logo.png\"))\n.asString();"
          },
          {
            "lang": "php",
            "source": "$response = Unirest\\Request::POST(\"https://api.logoraisr.com/rest-v1/uploads/\",\n  array(\n    \"Authorization\" => \"Token your_api_key\"\n\n  ),\n  array(\n    \"file\" => Unirest\\file::add(\"/path/to/your/logo.png\")\n  );"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Color": {
        "properties": {
          "blue": {
            "description": "RGB-Blue color value",
            "title": "Blue",
            "type": "integer"
          },
          "green": {
            "description": "RGB-Green color value.",
            "title": "Green",
            "type": "integer"
          },
          "hex": {
            "description": "Hex-label of this color.",
            "minLength": 1,
            "title": "Hex",
            "type": "string"
          },
          "number_of_pixel": {
            "description": "Number of pixels that holds this color.",
            "title": "Number of pixel",
            "type": "integer"
          },
          "percentage": {
            "description": "Percentage of pixels that holds this color.",
            "format": "decimal",
            "title": "Percentage",
            "type": "string"
          },
          "red": {
            "description": "RGB-Red color value.",
            "title": "Red",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FileResponse": {
        "properties": {
          "file_id": {
            "description": "Returns the file_id. To apply processes to the uploaded file, this file_id must be referenced in the API-calls.",
            "format": "uuid",
            "title": "File id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PreviewResponse": {
        "properties": {
          "preview_img_url": {
            "description": "Url from which the preview file can be downloaded.",
            "maxLength": 256,
            "minLength": 1,
            "title": "Preview img url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Process": {
        "properties": {
          "crop": {
            "description": "Crops the image according to the specified mechanism. If you specify the size \"WidthexHeight\", the image will be cropped centered. If coordinates \"x1,y1,x2,y2\" are given, the image is cropped according to the coordinates. The image will be cropped to the size of the stories if \"faces\" are specified as. Example Centered: \"crop\": \"200x300\". Example Region: \"crop\": \"200,300,150,300\". Example Faces: \"crop\": \"faces\".",
            "maxLength": 255,
            "minLength": 1,
            "title": "Crop",
            "type": "string"
          },
          "flip": {
            "description": "Flips the image around the horizontal axis, from top to bottom. Example: \"flip\": true",
            "title": "Flip",
            "type": "boolean"
          },
          "mirror": {
            "description": "Mirrors the image around the vertical axis, i.e. from right to left. Example: \"mirror\": true",
            "title": "Mirror",
            "type": "boolean"
          },
          "processing_algorithm": {
            "description": "Schlüssel welcher Verarbeitungs-Algorithmus angewendet wird. Zur Auswahl stehen \"logo-to-vector\", \"logo-super-resolution\", \"logo-segmentation\" und \"image-processing\".",
            "minLength": 1,
            "title": "Processing algorithm",
            "type": "string"
          },
          "resize": {
            "description": "Changes the size of the image according to the specified size. Example: \"resize\": \"200x300\".",
            "maxLength": 255,
            "minLength": 1,
            "title": "Resize",
            "type": "string"
          },
          "rotate": {
            "description": "Rotates the image around the center according to the specified degree. Example: \"rotate\": 90",
            "maximum": 360,
            "minimum": 0,
            "title": "Rotate",
            "type": "integer"
          }
        },
        "required": [
          "processing_algorithm"
        ],
        "type": "object"
      },
      "Project": {
        "properties": {
          "created": {
            "description": "The Date when the project was created.",
            "format": "date-time",
            "title": "Created",
            "type": "string"
          },
          "file_id": {
            "description": "Id of the file on which the process was applied.",
            "format": "uuid",
            "title": "File id",
            "type": "string"
          },
          "id": {
            "description": "Id of the created project.",
            "title": "Id",
            "type": "integer"
          },
          "paypal_payment_id": {
            "description": "Id of the paypal payment.",
            "minLength": 1,
            "title": "Paypal payment id",
            "type": "string"
          },
          "process": {
            "$ref": "#/components/schemas/Process"
          },
          "process_id": {
            "description": "Process which should applied. Processes are \"color-classification\".",
            "minLength": 1,
            "title": "Process id",
            "type": "string"
          },
          "project_number": {
            "description": "Number of the created project.",
            "title": "Project number",
            "type": "integer"
          },
          "project_title": {
            "description": "Name of the project with which it was saved.",
            "minLength": 1,
            "title": "Project title",
            "type": "string"
          },
          "result_file_id": {
            "description": "Id of the result file which the process created.",
            "format": "uuid",
            "title": "Result file id",
            "type": "string"
          }
        },
        "required": [
          "process_id"
        ],
        "type": "object"
      },
      "ProjectRequest": {
        "properties": {
          "file_id": {
            "description": "Id of the file on which the process is to be applied.",
            "format": "uuid",
            "title": "File id",
            "type": "string"
          },
          "process": {
            "$ref": "#/components/schemas/Process"
          },
          "project_title": {
            "description": "Name of the project with which it is saved.",
            "minLength": 1,
            "title": "Project title",
            "type": "string"
          }
        },
        "required": [
          "file_id",
          "project_title"
        ],
        "type": "object"
      },
      "ProjectResponse": {
        "properties": {
          "project_id": {
            "description": "Id of the created project.",
            "title": "Project id",
            "type": "integer"
          },
          "project_number": {
            "description": "Number of the created project.",
            "title": "Project number",
            "type": "integer"
          },
          "result_file_id": {
            "description": "Id of the result_file. This id must be specified to create the result_file_url.",
            "format": "uuid",
            "title": "Result file id",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Report": {
        "properties": {
          "created": {
            "description": "The Date when the report was created.",
            "format": "date-time",
            "title": "Created",
            "type": "string"
          },
          "file_id": {
            "description": "Id of the file on which the report was applied.",
            "format": "uuid",
            "title": "File id",
            "type": "string"
          },
          "process_id": {
            "description": "Process_id of the process which was applied. Processes are \"color-classification\".",
            "title": "Process id",
            "type": "integer"
          },
          "report_number": {
            "description": "Number of the created report.",
            "title": "Report number",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/Result"
          },
          "result_id": {
            "description": "Result_id of the result which was created.",
            "title": "Result id",
            "type": "integer"
          }
        },
        "required": [
          "report_number",
          "file_id",
          "process_id",
          "result_id"
        ],
        "type": "object"
      },
      "ReportRequest": {
        "properties": {
          "file_id": {
            "description": "Id of the file on which the process is to be applied.",
            "format": "uuid",
            "title": "File id",
            "type": "string"
          },
          "process": {
            "description": "Process which should applied. Processes are \"color-classification\".",
            "minLength": 1,
            "title": "Process",
            "type": "string"
          }
        },
        "required": [
          "process",
          "file_id"
        ],
        "type": "object"
      },
      "ReportResponse": {
        "properties": {
          "created": {
            "description": "The Date when the project was created.",
            "format": "date-time",
            "title": "Created",
            "type": "string"
          },
          "file_id": {
            "description": "Id of the file on which the process was applied.",
            "minLength": 1,
            "title": "File id",
            "type": "string"
          },
          "processing_algorithm": {
            "description": "Process which was applied. Processes are \"color-classification\".",
            "minLength": 1,
            "title": "Processing algorithm",
            "type": "string"
          },
          "report_number": {
            "description": "Number of the report which was created.",
            "title": "Report number",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/Result"
          }
        },
        "type": "object"
      },
      "Result": {
        "properties": {
          "colors": {
            "items": {
              "$ref": "#/components/schemas/Color"
            },
            "type": "array"
          },
          "height": {
            "description": "Height of image.",
            "title": "Height",
            "type": "integer"
          },
          "number_of_pixel_in_image": {
            "description": "Number of pixel in image.",
            "title": "Number of pixel in image",
            "type": "integer"
          },
          "width": {
            "description": "Width of image.",
            "title": "Width",
            "type": "integer"
          }
        },
        "title": "Result",
        "type": "object"
      },
      "ResultResponse": {
        "properties": {
          "result_file_url": {
            "description": "Url from which the result file can be downloaded.",
            "maxLength": 256,
            "minLength": 1,
            "title": "Result file url",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "Token": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  }
}