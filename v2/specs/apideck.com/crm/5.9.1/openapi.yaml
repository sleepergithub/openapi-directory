openapi: 3.0.3
servers:
  - description: Production
    url: https://unify.apideck.com
info:
  contact:
    email: hello@apideck.com
    url: https://developers.apideck.com
  description: |
    Welcome to the CRM API.

    You can use this API to access all CRM API endpoints.

    ## Base URL

    The base URL for all API requests is `https://unify.apideck.com`

    ## GraphQL

    Use the [GraphQL playground](https://developers.apideck.com/graphql/playground) to test out the GraphQL API.

    ## Headers

    Custom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.

    | Name                  | Type    | Required | Description                                                                                                                                                    |
    | --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |
    | x-apideck-service-id  | String  | No       | Describe the service you want to call (e.g., pipedrive). Only needed when a customer has activated multiple integrations for the same Unified API.             |
    | x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes.                                                                                                      |
    | x-apideck-app-id      | String  | Yes      | The application id of your Unify application. Available at https://app.apideck.com/unify/api-keys.                                                             |
    | Authorization         | String  | Yes      | Bearer API KEY                                                                                                                                                 |

    ## Authorization

    You can interact with the API through the authorization methods below.

    <!-- ReDoc-Inject: <security-definitions> -->

    ## Pagination

    All API resources have support for bulk retrieval via list APIs. For example, you can list [opportunities](#tag/Opportunities), [companies](#tag/Companies) and [leads](#tag/Leads). Apideck uses cursor-based pagination via the optional `cursor` and `limit` parameters.

    To fetch the first page of results, call the list API without a `cursor` parameter. Afterwards you can fetch subsequent pages by providing a cursor parameter. You will find the next cursor in the response body in `meta.cursors.next`. If `meta.cursors.next` is `null` you're at the end of the list.

    In the REST API you can also use the `links` from the response for added convenience. Simply call the URL in `links.next` to get the next page of results.

    ### Query Parameters

    | Name   | Type   | Required | Description                                                                                                        |
    | ------ | ------ | -------- | ------------------------------------------------------------------------------------------------------------------ |
    | cursor | String | No       | Cursor to start from. You can find cursors for next & previous pages in the meta.cursors property of the response. |
    | limit  | Number | No       | Number of results to return. Minimum 1, Maximum 200, Default 20                                                    |

    ### Response Body

    | Name                  | Type   | Description                                                        |
    | --------------------- | ------ | ------------------------------------------------------------------ |
    | meta.cursors.previous | String | Cursor to navigate to the previous page of results through the API |
    | meta.cursors.current  | String | Cursor to navigate to the current page of results through the API  |
    | meta.cursors.next     | String | Cursor to navigate to the next page of results through the API     |
    | meta.items_on_page    | Number | Number of items returned in the data property of the response      |
    | links.previous        | String | Link to navigate to the previous page of results through the API   |
    | links.current         | String | Link to navigate to the current page of results through the API    |
    | links.next            | String | Link to navigate to the next page of results through the API       |

    ⚠️ `meta.cursors.previous`/`links.previous` is not available for all connectors.

    ## SDKs and API Clients

    Upcoming. [Request the SDK of your choice](https://integrations.apideck.com/request).

    ## Debugging

    Because of the nature of the abstraction we do in Apideck Unify we still provide the option to the receive raw requests and responses being handled underlying. By including the raw flag `?raw=true` in your requests you can still receive the full request. Please note that this increases the response size and can introduce extra latency.

    ## Errors

    The API returns standard HTTP response codes to indicate success or failure of the API requests. For errors, we also return a customized error message inside the JSON response. You can see the returned HTTP status codes below.

    | Code | Title                | Description                                                                                                                                                                                              |
    | ---- | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | 200  | OK                   | The request message has been successfully processed, and it has produced a response. The response message varies, depending on the request method and the requested data.                                |
    | 201  | Created              | The request has been fulfilled and has resulted in one or more new resources being created.                                                                                                              |
    | 204  | No Content           | The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.                                                                          |
    | 400  | Bad Request          | The receiving server cannot understand the request because of malformed syntax. Do not repeat the request without first modifying it; check the request for errors, fix them and then retry the request. |
    | 401  | Unauthorized         | The request has not been applied because it lacks valid authentication credentials for the target resource.                                                                                              |
    | 402  | Payment Required     | Subscription data is incomplete or out of date. You'll need to provide payment details to continue.                                                                                                      |
    | 403  | Forbidden            | You do not have the appropriate user rights to access the request. Do not repeat the request.                                                                                                            |
    | 404  | Not Found            | The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.                                                                           |
    | 409  | Conflict             | The request could not be completed due to a conflict with the current state of the target resource.                                                                                                      |
    | 422  | Unprocessable Entity | The server understands the content type of the request entity, and the syntax of the request entity is correct but was unable to process the contained instructions.                                     |
    | 5xx  | Server Errors        | Something went wrong with the Unify API. These errors are logged on our side. You can contact our team to resolve the issue.                                                                             |

    ### Handling errors

    The Unify API and SDKs can produce errors for many reasons, such as a failed requests due to misconfigured integrations, invalid parameters, authentication errors, and network unavailability.

    ### Error Types

    #### RequestBodyValidationError

    Request body is not valid for the current endpoint. Check the spelling and types of your attributes, and ensure you are not passing data that is outside of the specification.

    #### RequestParametersValidationError

    Request parameters are not valid for the current endpoint. Check the spelling and types of your parameters, and ensure you are not passing parameters that are outside of the specification.

    #### RequestHeadersValidationError

    Request headers are not valid for the current endpoint. Check the spelling and types of your headers, and ensure you are not passing headers that are outside of the specification.

    #### UnsupportedFiltersError

    Filters in the request are valid, but not supported by the connector. Remove the unsupported filter(s) to get a successful response.

    #### UnsupportedSortFieldError

    Sort field (`sort[by]`) in the request is valid, but not supported by the connector. Replace or remove the sort field to get a successful response.

    #### InvalidCursorError

    Pagination cursor in the request is not valid for the current connector. Make sure to use a cursor returned from the API, for the same connector.

    #### ConnectorExecutionError

    A Unified API request made via one of our downstream connectors returned an unexpected error. The `status_code` returned is proxied through to error response along with their original response via the error detail.

    #### ConnectorProcessingError

    A Unified API request made via one of our downstream connectors returned a status code that was less than 400, along with a description of why the request could not be processed. Often this is due to the shape of request data being valid, but unable to be processed due to internal business logic - for example: an invalid relationship or `ID` present in your request.

    #### UnauthorizedError

    We were unable to authorize the request as made. This can happen for a number of reasons, from missing header params to passing an incorrect authorization token. Verify your Api Key is being set correctly in the authorization header. ie: `Authorization: 'Bearer sk_live_***'`

    #### ConnectorCredentialsError

    A request using a given connector has not been authorized. Ensure the connector you are trying to use has been configured correctly and been authorized for use.

    #### ConnectorDisabledError

    A request has been made to a connector that has since been disabled. This may be temporary - You can contact our team to resolve the issue.

    #### RequestLimitError

    You have reached the number of requests included in your Free Tier Subscription. You will no be able to make further requests until this limit resets at the end of the month, or talk to us about upgrading your subscription to continue immediately.

    #### EntityNotFoundError

    You've made a request for a resource or route that does not exist. Verify your path parameters or any identifiers used to fetch this resource.

    #### OAuthCredentialsNotFoundError

    When adding a connector integration that implements OAuth, both a `client_id` and `client_secret` must be provided before any authorizations can be performed. Verify the integration has been configured properly before continuing.

    #### IntegrationNotFoundError

    The requested connector integration could not be found associated to your `application_id`. Verify your `application_id` is correct, and that this connector has been added and configured for your application.

    #### ConnectionNotFoundError

    A valid connection could not be found associated to your `application_id`. Something _may_ have interrupted the authorization flow. You may need to start the connector authorization process again.

    #### ConnectorNotFoundError

    A request was made for an unknown connector. Verify your `service_id` is spelled correctly, and that this connector is enabled for your provided `unified_api`.

    #### OAuthRedirectUriError

    A request was made either in a connector authorization flow, or attempting to revoke connector access without a valid `redirect_uri`. This is the url the user should be returned to on completion of process.

    #### OAuthInvalidStateError

    The state param is required and is used to ensure the outgoing authorization state has not been altered before the user is redirected back. It also contains required params needed to identify the connector being used. If this has been altered, the authorization will not succeed.

    #### OAuthCodeExchangeError

    When attempting to exchange the authorization code for an `access_token` during an OAuth flow, an error occurred. This may be temporary. You can reattempt authorization or contact our team to resolve the issue.

    #### MappingError

    There was an error attempting to retrieve the mapping for a given attribute. We've been notified and are working to fix this issue.

    #### ConnectorMappingNotFoundError

    It seems the implementation for this connector is incomplete. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorResponseMappingNotFoundError

    We were unable to retrieve the response mapping for this connector. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorOperationMappingNotFoundError

    Connector mapping has not been implemented for the requested operation. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorWorkflowMappingError

    The composite api calls required for this operation have not been mapped entirely. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### PaginationNotSupportedError

    Pagination is not yet supported for this connector, try removing limit and/or cursor from the query. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    ## API Design

    ### API Styles and data formats

    #### REST API

    The API is organized around [REST](https://restfulapi.net/), providing simple and predictable URIs to access and modify objects. Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes. JSON is returned by all API responses, including errors. In all API requests, you must set the content-type HTTP header to application/json. All API requests must be made over HTTPS. Calls made over HTTP will fail.

    ##### Available HTTP methods

    The Apideck API uses HTTP verbs to understand if you want to read (GET), delete (DELETE) or create (POST) an object. When your web application cannot do a POST or DELETE, we provide the ability to set the method through the query parameter \_method.

    ```
    POST /messages
    GET /messages
    GET /messages/{messageId}
    PATCH /messages/{messageId}
    DELETE /messages/{messageId}
    ```

    Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise. For some endpoints and use cases we divert from REST to provide a better developer experience.

    ### Schema

    All API requests and response bodies adhere to a common JSON format representing individual items, collections of items, links to related items and additional meta data.

    ### Meta

    Meta data can be represented as a top level member named “meta”. Any information may be provided in the meta data. It’s most common use is to return the total number of records when requesting a collection of resources.

    ### Idempotence (upcoming)

    To prevent the creation of duplicate resources, every POST method (such as one that creates a consumer record) must specify a unique value for the X-Unique-Transaction-ID header name. Uniquely identifying each unique POST request ensures that the API processes a given request once and only once.

    Uniquely identifying new resource-creation POSTs is especially important when the outcome of a response is ambiguous because of a transient service interruption, such as a server-side timeout or network disruption. If a service interruption occurs, then the client application can safely retry the uniquely identified request without creating duplicate operations. (API endpoints that guarantee that every uniquely identified request is processed only once no matter how many times that uniquely identifiable request is made are described as idempotent.)

    ### Request IDs

    Each API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.

    ### Fixed field types

    #### Dates

    The dates returned by the API are all represented in UTC (ISO8601 format).

    This example `2019-11-14T00:55:31.820Z` is defined by the ISO 8601 standard. The T in the middle separates the year-month-day portion from the hour-minute-second portion. The Z on the end means UTC, that is, an offset-from-UTC of zero hours-minutes-seconds. The Z is pronounced "Zulu" per military/aviation tradition.

    The ISO 8601 standard is more modern. The formats are wisely designed to be easy to parse by machine as well as easy to read by humans across cultures.

    #### Prices and Currencies

    All prices returned by the API are represented as integer amounts in a currency’s smallest unit. For example, $5 USD would be returned as 500 (i.e, 500 cents).

    For zero-decimal currencies, amounts will still be provided as an integer but without the need to divide by 100. For example, an amount of ¥5 (JPY) would be returned as 5.

    All currency codes conform to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).

    ## Support

    If you have problems or need help with your case, you can always reach out to our Support.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: CRM API
  version: 5.9.1
  x-apideck-api: crm
  x-apideck-sdk-support: true
  x-apisguru-categories:
    - developer_tools
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_developers.apideck.com_icon.png
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/apideck-libraries/openapi-specs/master/crm.yml
      version: "3.0"
  x-providerName: apideck.com
  x-serviceName: crm
  x-tags:
    - partner
externalDocs:
  description: Apideck Developer Docs
  url: https://developers.apideck.com
security:
  - apiKey: []
    applicationId: []
    consumerId: []
tags:
  - description: ""
    name: Companies
    x-apideck-model:
      $ref: "#/components/schemas/Company"
  - description: ""
    name: Opportunities
    x-apideck-model:
      $ref: "#/components/schemas/Opportunity"
  - description: ""
    name: Leads
    x-apideck-model:
      $ref: "#/components/schemas/Lead"
  - description: ""
    name: Contacts
    x-apideck-model:
      $ref: "#/components/schemas/Contact"
  - description: ""
    name: Pipelines
    x-apideck-model:
      $ref: "#/components/schemas/Pipeline"
  - description: ""
    name: Notes
    x-apideck-model:
      $ref: "#/components/schemas/Note"
  - description: ""
    name: Users
    x-apideck-model:
      $ref: "#/components/schemas/User"
  - description: ""
    name: Activities
    x-apideck-model:
      $ref: "#/components/schemas/Activity"
paths:
  /crm/activities:
    get:
      description: List activities
      operationId: activitiesAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/GetActivitiesResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List activities
      tags:
        - Activities
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.activitiesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: activities
    post:
      description: Create activity
      operationId: activitiesAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Activity"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateActivityResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create activity
      tags:
        - Activities
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              activity: {
                activity_datetime: '2021-05-01T12:00:00.000Z',
                duration_seconds: 1800,
                account_id: '12345',
                contact_id: '12345',
                company_id: '12345',
                opportunity_id: '12345',
                lead_id: '12345',
                owner_id: '12345',
                campaign_id: '12345',
                case_id: '12345',
                asset_id: '12345',
                contract_id: '12345',
                product_id: '12345',
                solution_id: '12345',
                custom_object_id: '12345',
                type: 'meeting',
                title: 'Meeting',
                description: 'More info about the meeting',
                location: 'Space',
                all_day_event: false,
                private: true,
                group_event: true,
                event_sub_type: 'debrief',
                group_event_type: 'Proposed',
                child: false,
                archived: false,
                deleted: false,
                show_as: 'busy',
                activity_date: '2021-05-01',
                start_datetime: '2021-05-01T12:00:00.000Z',
                end_datetime: '2021-05-01T12:30:00.000Z',
                end_date: '2021-05-01',
                recurrent: false,
                reminder_datetime: '2021-05-01T17:00:00.000Z',
                reminder_set: false,
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.crm.activitiesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/crm/activities/{id}":
    delete:
      description: Delete activity
      operationId: activitiesDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteActivityResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete activity
      tags:
        - Activities
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.activitiesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get activity
      operationId: activitiesOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetActivityResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get activity
      tags:
        - Activities
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.activitiesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update activity
      operationId: activitiesUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Activity"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateActivityResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update activity
      tags:
        - Activities
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              activity: {
                activity_datetime: '2021-05-01T12:00:00.000Z',
                duration_seconds: 1800,
                account_id: '12345',
                contact_id: '12345',
                company_id: '12345',
                opportunity_id: '12345',
                lead_id: '12345',
                owner_id: '12345',
                campaign_id: '12345',
                case_id: '12345',
                asset_id: '12345',
                contract_id: '12345',
                product_id: '12345',
                solution_id: '12345',
                custom_object_id: '12345',
                type: 'meeting',
                title: 'Meeting',
                description: 'More info about the meeting',
                location: 'Space',
                all_day_event: false,
                private: true,
                group_event: true,
                event_sub_type: 'debrief',
                group_event_type: 'Proposed',
                child: false,
                archived: false,
                deleted: false,
                show_as: 'busy',
                activity_date: '2021-05-01',
                start_datetime: '2021-05-01T12:00:00.000Z',
                end_datetime: '2021-05-01T12:30:00.000Z',
                end_date: '2021-05-01',
                recurrent: false,
                reminder_datetime: '2021-05-01T17:00:00.000Z',
                reminder_set: false,
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.crm.activitiesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /crm/companies:
    get:
      description: List companies
      operationId: companiesAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/companiesFilter"
        - $ref: "#/components/parameters/companiesSort"
      responses:
        "200":
          $ref: "#/components/responses/GetCompaniesResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List companies
      tags:
        - Companies
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.companiesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: companies
    post:
      description: Create company
      operationId: companiesAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Company"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateCompanyResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create company
      tags:
        - Companies
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              company: {
                name: 'SpaceX',
                owner_id: '12345',
                image: 'https://www.spacex.com/static/images/share.jpg',
                description:
                  'Space Exploration Technologies Corp. is an American aerospace manufacturer, space transportation services and communications company headquartered in Hawthorne, California.',
                vat_number: 'BE0689615164',
                currency: 'USD',
                status: 'Open',
                fax: '+12129876543',
                annual_revenue: '+$35m',
                number_of_employees: '500-1000',
                industry: 'Apparel',
                ownership: 'Public',
                sales_tax_number: '12456EN',
                payee_number: '78932EN',
                abn_or_tfn: '46 115 614 695',
                abn_branch: '123',
                acn: 'XXX XXX XXX',
                bank_accounts: [
                  {
                    iban: 'CH2989144532982975332',
                    bic: 'AUDSCHGGXXX',
                    bsb_number: '062-001',
                    bank_code: 'BNH',
                    account_number: '123456789',
                    account_name: 'SPACEX LLC'
                  }
                ],
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    contact_name: '111-111-1111',
                    salutation: '111-111-1111',
                    phone_number: '111-111-1111',
                    fax: '111-111-1111',
                    email: '111-111-1111',
                    website: '111-111-1111'
                  }
                ],
                social_links: [
                  {
                    id: '12345',
                    url: 'https://www.twitter.com/apideck-io',
                    type: 'twitter'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    number: '111-111-1111',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                tags: ['New'],
                read_only: false
              }
            }

            try {
              const { data } = await apideck.crm.companiesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/crm/companies/{id}":
    delete:
      description: Delete company
      operationId: companiesDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteCompanyResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete company
      tags:
        - Companies
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.companiesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get company
      operationId: companiesOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          $ref: "#/components/responses/GetCompanyResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get company
      tags:
        - Companies
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.companiesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update company
      operationId: companiesUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Company"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateCompanyResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update company
      tags:
        - Companies
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              company: {
                name: 'SpaceX',
                owner_id: '12345',
                image: 'https://www.spacex.com/static/images/share.jpg',
                description:
                  'Space Exploration Technologies Corp. is an American aerospace manufacturer, space transportation services and communications company headquartered in Hawthorne, California.',
                vat_number: 'BE0689615164',
                currency: 'USD',
                status: 'Open',
                fax: '+12129876543',
                annual_revenue: '+$35m',
                number_of_employees: '500-1000',
                industry: 'Apparel',
                ownership: 'Public',
                sales_tax_number: '12456EN',
                payee_number: '78932EN',
                abn_or_tfn: '46 115 614 695',
                abn_branch: '123',
                acn: 'XXX XXX XXX',
                bank_accounts: [
                  {
                    iban: 'CH2989144532982975332',
                    bic: 'AUDSCHGGXXX',
                    bsb_number: '062-001',
                    bank_code: 'BNH',
                    account_number: '123456789',
                    account_name: 'SPACEX LLC'
                  }
                ],
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    contact_name: '111-111-1111',
                    salutation: '111-111-1111',
                    phone_number: '111-111-1111',
                    fax: '111-111-1111',
                    email: '111-111-1111',
                    website: '111-111-1111'
                  }
                ],
                social_links: [
                  {
                    id: '12345',
                    url: 'https://www.twitter.com/apideck-io',
                    type: 'twitter'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    number: '111-111-1111',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                tags: ['New'],
                read_only: false
              }
            }

            try {
              const { data } = await apideck.crm.companiesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /crm/contacts:
    get:
      description: List contacts
      operationId: contactsAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/contactsFilter"
        - $ref: "#/components/parameters/contactsSort"
      responses:
        "200":
          $ref: "#/components/responses/GetContactsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List contacts
      tags:
        - Contacts
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.contactsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: contacts
    post:
      description: Create contact
      operationId: contactsAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateContactResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create contact
      tags:
        - Contacts
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              contact: {
                name: 'Elon Musk',
                owner_id: '54321',
                type: 'personal',
                company_id: '23456',
                company_name: '23456',
                lead_id: '34567',
                first_name: 'Elon',
                middle_name: 'D.',
                last_name: 'Musk',
                prefix: 'Mr.',
                suffix: 'PhD',
                title: 'CEO',
                department: 'Engineering',
                language: 'EN',
                gender: 'female',
                birthday: '2000-08-12',
                image: 'https://unavatar.io/elon-musk',
                lead_source: 'Cold Call',
                fax: '+12129876543',
                description: 'Internal champion',
                current_balance: 10.5,
                status: 'open',
                active: true,
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    contact_name: '111-111-1111',
                    salutation: '111-111-1111',
                    phone_number: '111-111-1111',
                    fax: '111-111-1111',
                    email: '111-111-1111',
                    website: '111-111-1111'
                  }
                ],
                social_links: [
                  {
                    id: '12345',
                    url: 'https://www.twitter.com/apideck-io',
                    type: 'twitter'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    number: '111-111-1111',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                tags: ['New']
              }
            }

            try {
              const { data } = await apideck.crm.contactsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/crm/contacts/{id}":
    delete:
      description: Delete contact
      operationId: contactsDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteContactResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete contact
      tags:
        - Contacts
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.contactsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get contact
      operationId: contactsOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetContactResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get contact
      tags:
        - Contacts
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.contactsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update contact
      operationId: contactsUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateContactResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update contact
      tags:
        - Contacts
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              contact: {
                name: 'Elon Musk',
                owner_id: '54321',
                type: 'personal',
                company_id: '23456',
                company_name: '23456',
                lead_id: '34567',
                first_name: 'Elon',
                middle_name: 'D.',
                last_name: 'Musk',
                prefix: 'Mr.',
                suffix: 'PhD',
                title: 'CEO',
                department: 'Engineering',
                language: 'EN',
                gender: 'female',
                birthday: '2000-08-12',
                image: 'https://unavatar.io/elon-musk',
                lead_source: 'Cold Call',
                fax: '+12129876543',
                description: 'Internal champion',
                current_balance: 10.5,
                status: 'open',
                active: true,
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    contact_name: '111-111-1111',
                    salutation: '111-111-1111',
                    phone_number: '111-111-1111',
                    fax: '111-111-1111',
                    email: '111-111-1111',
                    website: '111-111-1111'
                  }
                ],
                social_links: [
                  {
                    id: '12345',
                    url: 'https://www.twitter.com/apideck-io',
                    type: 'twitter'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    number: '111-111-1111',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                tags: ['New']
              }
            }

            try {
              const { data } = await apideck.crm.contactsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /crm/leads:
    get:
      description: List leads
      operationId: leadsAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/leadsFilter"
        - $ref: "#/components/parameters/leadsSort"
      responses:
        "200":
          $ref: "#/components/responses/GetLeadsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List leads
      tags:
        - Leads
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.leadsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: leads
    post:
      description: Create lead
      operationId: leadsAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Lead"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateLeadResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create lead
      tags:
        - Leads
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              lead: {
                name: 'Elon Musk',
                company_name: 'Spacex',
                owner_id: '54321',
                company_id: '2',
                contact_id: '2',
                lead_source: 'Cold Call',
                first_name: 'Elon',
                last_name: 'Musk',
                description: 'A thinker',
                prefix: 'Sir',
                title: 'CEO',
                language: 'EN',
                status: 'New',
                monetary_amount: 75000,
                currency: 'USD',
                fax: '+12129876543',
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    contact_name: '111-111-1111',
                    salutation: '111-111-1111',
                    phone_number: '111-111-1111',
                    fax: '111-111-1111',
                    email: '111-111-1111',
                    website: '111-111-1111'
                  }
                ],
                social_links: [
                  {
                    id: '12345',
                    url: 'https://www.twitter.com/apideck-io',
                    type: 'twitter'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    number: '111-111-1111',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                tags: ['New']
              }
            }

            try {
              const { data } = await apideck.crm.leadsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/crm/leads/{id}":
    delete:
      description: Delete lead
      operationId: leadsDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteLeadResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete lead
      tags:
        - Leads
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.leadsDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get lead
      operationId: leadsOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetLeadResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get lead
      tags:
        - Leads
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.leadsOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update lead
      operationId: leadsUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Lead"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateLeadResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update lead
      tags:
        - Leads
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              lead: {
                name: 'Elon Musk',
                company_name: 'Spacex',
                owner_id: '54321',
                company_id: '2',
                contact_id: '2',
                lead_source: 'Cold Call',
                first_name: 'Elon',
                last_name: 'Musk',
                description: 'A thinker',
                prefix: 'Sir',
                title: 'CEO',
                language: 'EN',
                status: 'New',
                monetary_amount: 75000,
                currency: 'USD',
                fax: '+12129876543',
                websites: [
                  {
                    id: '12345',
                    url: 'http://example.com',
                    type: 'primary'
                  }
                ],
                addresses: [
                  {
                    id: '123',
                    type: 'primary',
                    string: '25 Spring Street, Blackburn, VIC 3130',
                    name: 'HQ US',
                    line1: 'Main street',
                    line2: 'apt #',
                    city: 'San Francisco',
                    state: 'CA',
                    postal_code: '94104',
                    country: 'US',
                    latitude: '40.759211',
                    longitude: '-73.984638',
                    contact_name: '111-111-1111',
                    salutation: '111-111-1111',
                    phone_number: '111-111-1111',
                    fax: '111-111-1111',
                    email: '111-111-1111',
                    website: '111-111-1111'
                  }
                ],
                social_links: [
                  {
                    id: '12345',
                    url: 'https://www.twitter.com/apideck-io',
                    type: 'twitter'
                  }
                ],
                phone_numbers: [
                  {
                    id: '12345',
                    number: '111-111-1111',
                    type: 'primary'
                  }
                ],
                emails: [
                  {
                    id: '123',
                    email: 'elon@musk.com',
                    type: 'primary'
                  }
                ],
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                tags: ['New']
              }
            }

            try {
              const { data } = await apideck.crm.leadsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /crm/notes:
    get:
      description: List notes
      operationId: notesAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/GetNotesResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List notes
      tags:
        - Notes
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.notesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: notes
    post:
      description: Create note
      operationId: notesAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Note"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateNoteResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create note
      tags:
        - Notes
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              note: {
                title: 'Meeting Notes',
                content: 'Office hours are 9AM-6PM',
                owner_id: '12345',
                contact_id: '12345',
                company_id: '12345',
                opportunity_id: '12345',
                lead_id: '12345',
                active: true
              }
            }

            try {
              const { data } = await apideck.crm.notesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/crm/notes/{id}":
    delete:
      description: Delete note
      operationId: notesDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteNoteResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete note
      tags:
        - Notes
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.notesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get note
      operationId: notesOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetNoteResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get note
      tags:
        - Notes
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.notesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update note
      operationId: notesUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Note"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateNoteResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update note
      tags:
        - Notes
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              note: {
                title: 'Meeting Notes',
                content: 'Office hours are 9AM-6PM',
                owner_id: '12345',
                contact_id: '12345',
                company_id: '12345',
                opportunity_id: '12345',
                lead_id: '12345',
                active: true
              }
            }

            try {
              const { data } = await apideck.crm.notesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /crm/opportunities:
    get:
      description: List opportunities
      operationId: opportunitiesAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/opportunitiesFilter"
        - $ref: "#/components/parameters/opportunitiesSort"
      responses:
        "200":
          $ref: "#/components/responses/GetOpportunitiesResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List opportunities
      tags:
        - Opportunities
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.opportunitiesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: opportunities
    post:
      description: Create opportunity
      operationId: opportunitiesAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Opportunity"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateOpportunityResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create opportunity
      tags:
        - Opportunities
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              opportunity: {
                title: 'New Rocket',
                primary_contact_id: '12345',
                description:
                  'Opportunities are created for People and Companies that are interested in buying your products or services. Create Opportunities for People and Companies to move them through one of your Pipelines.',
                type: 'Existing Customer - Upgrade',
                monetary_amount: 75000,
                currency: 'USD',
                win_probability: 40,
                close_date: '2020-10-30',
                loss_reason_id: '12345',
                loss_reason: 'No budget',
                won_reason_id: '12345',
                won_reason: 'Best pitch',
                pipeline_id: '12345',
                pipeline_stage_id: '12345',
                source_id: '12345',
                lead_id: '12345',
                lead_source: 'Website',
                contact_id: '12345',
                company_id: '12345',
                company_name: 'Copper',
                owner_id: '12345',
                priority: 'None',
                status: 'Open',
                status_id: '12345',
                tags: ['New'],
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                stage_last_changed_at: '2020-09-30T07:43:32.000Z'
              }
            }

            try {
              const { data } = await apideck.crm.opportunitiesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/crm/opportunities/{id}":
    delete:
      description: Delete opportunity
      operationId: opportunitiesDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteOpportunityResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete opportunity
      tags:
        - Opportunities
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.opportunitiesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get opportunity
      operationId: opportunitiesOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetOpportunityResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get opportunity
      tags:
        - Opportunities
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.opportunitiesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update opportunity
      operationId: opportunitiesUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Opportunity"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateOpportunityResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update opportunity
      tags:
        - Opportunities
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              opportunity: {
                title: 'New Rocket',
                primary_contact_id: '12345',
                description:
                  'Opportunities are created for People and Companies that are interested in buying your products or services. Create Opportunities for People and Companies to move them through one of your Pipelines.',
                type: 'Existing Customer - Upgrade',
                monetary_amount: 75000,
                currency: 'USD',
                win_probability: 40,
                close_date: '2020-10-30',
                loss_reason_id: '12345',
                loss_reason: 'No budget',
                won_reason_id: '12345',
                won_reason: 'Best pitch',
                pipeline_id: '12345',
                pipeline_stage_id: '12345',
                source_id: '12345',
                lead_id: '12345',
                lead_source: 'Website',
                contact_id: '12345',
                company_id: '12345',
                company_name: 'Copper',
                owner_id: '12345',
                priority: 'None',
                status: 'Open',
                status_id: '12345',
                tags: ['New'],
                custom_fields: [
                  {
                    id: 'custom_technologies',
                    value: 'Uses Salesforce and Marketo'
                  }
                ],
                stage_last_changed_at: '2020-09-30T07:43:32.000Z'
              }
            }

            try {
              const { data } = await apideck.crm.opportunitiesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /crm/pipelines:
    get:
      description: List pipelines
      operationId: pipelinesAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      responses:
        "200":
          $ref: "#/components/responses/GetPipelinesResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List pipelines
      tags:
        - Pipelines
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.pipelinesAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: pipelines
    post:
      description: Create pipeline
      operationId: pipelinesAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pipeline"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreatePipelineResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create pipeline
      tags:
        - Pipelines
      x-apideck-api: crm
      x-apideck-upcoming: true
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              pipeline: {
                id: 'default',
                name: 'Sales Pipeline',
                currency: 'USD',
                archived: false,
                display_order: 1,
                stages: [
                  {
                    name: 'Contract Sent',
                    value: 'CONTRACT_SENT',
                    display_order: 1
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.crm.pipelinesAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/crm/pipelines/{id}":
    delete:
      description: Delete pipeline
      operationId: pipelinesDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeletePipelineResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete pipeline
      tags:
        - Pipelines
      x-apideck-api: crm
      x-apideck-upcoming: true
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.pipelinesDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get pipeline
      operationId: pipelinesOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetPipelineResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get pipeline
      tags:
        - Pipelines
      x-apideck-api: crm
      x-apideck-upcoming: true
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.pipelinesOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update pipeline
      operationId: pipelinesUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pipeline"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdatePipelineResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update pipeline
      tags:
        - Pipelines
      x-apideck-api: crm
      x-apideck-upcoming: true
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              pipeline: {
                id: 'default',
                name: 'Sales Pipeline',
                currency: 'USD',
                archived: false,
                display_order: 1,
                stages: [
                  {
                    name: 'Contract Sent',
                    value: 'CONTRACT_SENT',
                    display_order: 1
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.crm.pipelinesUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  /crm/users:
    get:
      description: List users
      operationId: usersAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/GetUsersResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List users
      tags:
        - Users
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.usersAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: users
    post:
      description: Create user
      operationId: usersAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateUserResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create user
      tags:
        - Users
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              user: {
                email: 'elon@musk.com',
                parent_id: '54321',
                username: 'masterofcoin',
                first_name: 'Elon',
                last_name: 'Musk',
                image: 'https://logo.clearbit.com/spacex.com?s=128',
                language: 'EN',
                status: 'active',
                password: 'supersecretpassword'
              }
            }

            try {
              const { data } = await apideck.crm.usersAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/crm/users/{id}":
    delete:
      description: Delete user
      operationId: usersDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/DeleteUserResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete user
      tags:
        - Users
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.usersDelete({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get user
      operationId: usersOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      responses:
        "200":
          $ref: "#/components/responses/GetUserResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get user
      tags:
        - Users
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.crm.usersOne({
                id: 'id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    patch:
      description: Update user
      operationId: usersUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateUserResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update user
      tags:
        - Users
      x-apideck-api: crm
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              user: {
                email: 'elon@musk.com',
                parent_id: '54321',
                username: 'masterofcoin',
                first_name: 'Elon',
                last_name: 'Musk',
                image: 'https://logo.clearbit.com/spacex.com?s=128',
                language: 'EN',
                status: 'active',
                password: 'supersecretpassword'
              }
            }

            try {
              const { data } = await apideck.crm.usersUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
components:
  parameters:
    applicationId:
      description: The ID of your Unify application
      in: header
      name: x-apideck-app-id
      required: true
      schema:
        type: string
    companiesFilter:
      description: Apply filters (beta)
      explode: true
      in: query
      name: filter
      schema:
        $ref: "#/components/schemas/CompaniesFilter"
      style: deepObject
    companiesSort:
      description: Apply sorting (beta)
      explode: true
      in: query
      name: sort
      schema:
        $ref: "#/components/schemas/CompaniesSort"
      style: deepObject
    consumerId:
      description: ID of the consumer which you want to get or push data from
      in: header
      name: x-apideck-consumer-id
      required: true
      schema:
        type: string
    contactsFilter:
      description: Apply filters (beta)
      explode: true
      in: query
      name: filter
      schema:
        $ref: "#/components/schemas/ContactsFilter"
      style: deepObject
    contactsSort:
      description: Apply sorting (beta)
      explode: true
      in: query
      name: sort
      schema:
        $ref: "#/components/schemas/ContactsSort"
      style: deepObject
    cursor:
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      in: query
      name: cursor
      schema:
        nullable: true
        type: string
    id:
      description: ID of the record you are acting upon.
      in: path
      name: id
      required: true
      schema:
        type: string
    leadsFilter:
      description: Apply filters (beta)
      explode: true
      in: query
      name: filter
      schema:
        $ref: "#/components/schemas/LeadsFilter"
      style: deepObject
    leadsSort:
      description: Apply sorting (beta)
      explode: true
      in: query
      name: sort
      schema:
        $ref: "#/components/schemas/LeadsSort"
      style: deepObject
    limit:
      description: Number of records to return
      in: query
      name: limit
      schema:
        default: 20
        maximum: 200
        minimum: 1
        type: integer
    opportunitiesFilter:
      description: Apply filters (beta)
      explode: true
      in: query
      name: filter
      schema:
        $ref: "#/components/schemas/OpportunitiesFilter"
      style: deepObject
    opportunitiesSort:
      description: Apply sorting (beta)
      explode: true
      in: query
      name: sort
      schema:
        $ref: "#/components/schemas/OpportunitiesSort"
      style: deepObject
    raw:
      description: Include raw response. Mostly used for debugging purposes
      in: query
      name: raw
      schema:
        default: true
        type: boolean
    serviceId:
      description: Provide the service id you want to call (e.g., pipedrive). [See the full list in the connector section.](#section/Connectors) Only needed when a consumer has activated multiple integrations for a Unified API.
      in: header
      name: x-apideck-service-id
      schema:
        type: string
  responses:
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestResponse"
      description: Bad Request
    CreateActivityResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateActivityResponse"
      description: Activity created
    CreateCompanyResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateCompanyResponse"
      description: Company created
    CreateContactResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateContactResponse"
      description: Contact created
    CreateLeadResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateLeadResponse"
      description: Lead created
    CreateNoteResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateNoteResponse"
      description: Note created
    CreateOpportunityResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateOpportunityResponse"
      description: Opportunity created
    CreatePipelineResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreatePipelineResponse"
      description: Pipeline created
    CreateUserResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateUserResponse"
      description: User created
    DeleteActivityResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteActivityResponse"
      description: Activity deleted
    DeleteCompanyResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteCompanyResponse"
      description: Company deleted
    DeleteContactResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteContactResponse"
      description: Contact deleted
    DeleteLeadResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteLeadResponse"
      description: Lead deleted
    DeleteNoteResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteNoteResponse"
      description: Note deleted
    DeleteOpportunityResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteOpportunityResponse"
      description: Opportunity deleted
    DeletePipelineResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeletePipelineResponse"
      description: Pipeline deleted
    DeleteUserResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteUserResponse"
      description: User deleted
    GetActivitiesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetActivitiesResponse"
      description: Activities
    GetActivityResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetActivityResponse"
      description: Activity
    GetCompaniesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetCompaniesResponse"
      description: Companies
    GetCompanyResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetCompanyResponse"
      description: Company
    GetContactResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetContactResponse"
      description: Contact
    GetContactsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetContactsResponse"
      description: Contacts
    GetLeadResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetLeadResponse"
      description: Lead
    GetLeadsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetLeadsResponse"
      description: Leads
    GetNoteResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetNoteResponse"
      description: Note
    GetNotesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetNotesResponse"
      description: Notes
    GetOpportunitiesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetOpportunitiesResponse"
      description: Opportunities
    GetOpportunityResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetOpportunityResponse"
      description: Opportunity
    GetPipelineResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetPipelineResponse"
      description: Pipeline
    GetPipelinesResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetPipelinesResponse"
      description: Pipelines
    GetUserResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetUserResponse"
      description: User
    GetUsersResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetUsersResponse"
      description: Users
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundResponse"
      description: The specified resource was not found
    NotImplementedResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotImplementedResponse"
      description: Not Implemented
    PaymentRequiredResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PaymentRequiredResponse"
      description: Payment Required
    UnauthorizedResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnauthorizedResponse"
      description: Unauthorized
    UnexpectedErrorResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnexpectedErrorResponse"
      description: Unexpected error
    UnprocessableResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnprocessableResponse"
      description: Unprocessable
    UpdateActivityResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateActivityResponse"
      description: Activity updated
    UpdateCompanyResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateCompanyResponse"
      description: Company updated
    UpdateContactResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateContactResponse"
      description: Contact updated
    UpdateLeadResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateLeadResponse"
      description: Lead updated
    UpdateNoteResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateNoteResponse"
      description: Note updated
    UpdateOpportunityResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateOpportunityResponse"
      description: Opportunity updated
    UpdatePipelineResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdatePipelineResponse"
      description: Pipeline updated
    UpdateUserResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateUserResponse"
      description: User updated
  schemas:
    Activity:
      additionalProperties: false
      properties:
        account_id:
          example: "12345"
          nullable: true
          type: string
        activity_date:
          example: 2021-05-01
          nullable: true
          type: string
        activity_datetime:
          example: 2021-05-01T12:00:00.000Z
          minLength: 1
          nullable: true
          type: string
        all_day_event:
          example: false
          type: boolean
        archived:
          example: false
          type: boolean
        asset_id:
          example: "12345"
          nullable: true
          type: string
        campaign_id:
          example: "12345"
          nullable: true
          type: string
        case_id:
          example: "12345"
          nullable: true
          type: string
        child:
          example: false
          type: boolean
        company_id:
          example: "12345"
          nullable: true
          type: string
        contact_id:
          example: "12345"
          nullable: true
          type: string
        contract_id:
          example: "12345"
          nullable: true
          type: string
        created_at:
          example: 2020-09-30T07:43:32.000Z
          readOnly: true
          type: string
        created_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
        custom_fields:
          items:
            $ref: "#/components/schemas/CustomField"
          type: array
        custom_object_id:
          example: "12345"
          nullable: true
          type: string
        deleted:
          example: false
          type: boolean
        description:
          example: More info about the meeting
          nullable: true
          type: string
        duration_minutes:
          example: 30
          nullable: true
          readOnly: true
          type: integer
        duration_seconds:
          example: 1800
          minimum: 0
          nullable: true
          type: integer
        end_date:
          example: 2021-05-01
          nullable: true
          type: string
        end_datetime:
          example: 2021-05-01T12:30:00.000Z
          nullable: true
          type: string
        event_sub_type:
          example: debrief
          nullable: true
          type: string
        group_event:
          example: true
          type: boolean
        group_event_type:
          example: Proposed
          nullable: true
          type: string
        id:
          example: "12345"
          readOnly: true
          type: string
        lead_id:
          example: "12345"
          nullable: true
          type: string
        location:
          example: Space
          nullable: true
          type: string
        opportunity_id:
          example: "12345"
          nullable: true
          type: string
        owner_id:
          example: "12345"
          nullable: true
          type: string
        private:
          example: true
          type: boolean
        product_id:
          example: "12345"
          nullable: true
          type: string
        recurrent:
          example: false
          type: boolean
        reminder_datetime:
          example: 2021-05-01T17:00:00.000Z
          nullable: true
          type: string
        reminder_set:
          example: false
          nullable: true
          type: boolean
        show_as:
          enum:
            - free
            - busy
          example: busy
          type: string
        solution_id:
          example: "12345"
          nullable: true
          type: string
        start_datetime:
          example: 2021-05-01T12:00:00.000Z
          nullable: true
          type: string
        title:
          example: Meeting
          nullable: true
          type: string
        type:
          enum:
            - call
            - meeting
            - email
            - note
            - task
            - send-letter
            - send-quote
            - other
          example: meeting
          type: string
          x-graphql-type-name: ActivityType
        updated_at:
          example: 2020-09-30T07:43:32.000Z
          readOnly: true
          type: string
        updated_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
      required:
        - type
      type: object
    Address:
      properties:
        city:
          description: Name of city.
          example: San Francisco
          nullable: true
          type: string
        contact_name:
          example: 111-111-1111
          nullable: true
          type: string
        country:
          description: country code according to ISO 3166-1 alpha-2.
          example: US
          nullable: true
          type: string
        email:
          example: 111-111-1111
          nullable: true
          type: string
        fax:
          example: 111-111-1111
          nullable: true
          type: string
        id:
          example: "123"
          nullable: true
          type: string
        latitude:
          example: "40.759211"
          nullable: true
          type: string
        line1:
          description: "Line 1 of the address e.g. number, street, suite, apt #, etc."
          example: Main street
          nullable: true
          type: string
        line2:
          description: Line 2 of the address
          example: "apt #"
          nullable: true
          type: string
        longitude:
          example: "-73.984638"
          nullable: true
          type: string
        name:
          example: HQ US
          nullable: true
          type: string
        phone_number:
          example: 111-111-1111
          nullable: true
          type: string
        postal_code:
          description: Zip code or equivalent.
          example: "94104"
          nullable: true
          type: string
        salutation:
          example: 111-111-1111
          nullable: true
          type: string
        state:
          description: Name of state
          example: CA
          nullable: true
          type: string
        string:
          example: 25 Spring Street, Blackburn, VIC 3130
          nullable: true
          title: The address string. Some APIs don't provide structured address data.
          type: string
        type:
          enum:
            - primary
            - secondary
            - home
            - office
            - shipping
            - billing
            - other
          example: primary
          type: string
          x-graphql-type-name: AddressType
        website:
          example: 111-111-1111
          nullable: true
          type: string
      type: object
    BadRequestResponse:
      properties:
        detail:
          anyOf:
            - example: Missing property foobar
              type: string
            - example:
                missing:
                  - foobar: required
              type: object
          description: Contains parameter or domain specific information related to the error and why it occured.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Invalid Params
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestbodyvalidationerror
          type: string
        status_code:
          description: HTTP status code
          example: 400
          type: number
        type_name:
          description: The type of error returned
          example: RequestHeadersValidationError
          type: string
    BankAccount:
      properties:
        account_name:
          description: The name which you used in opening your bank account.
          example: SPACEX LLC
          nullable: true
          title: Bank Account Name
          type: string
        account_number:
          description: A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
          example: "123456789"
          nullable: true
          title: Bank Account Number
          type: string
        bank_code:
          description: A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
          example: BNH
          nullable: true
          title: Bank Code
          type: string
        bic:
          example: AUDSCHGGXXX
          nullable: true
          type: string
        bsb_number:
          description: A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
          example: 062-001
          nullable: true
          title: BSB Number
          type: string
        iban:
          example: CH2989144532982975332
          nullable: true
          type: string
      type: object
    CompaniesFilter:
      additionalProperties: false
      example:
        name: SpaceX
      properties:
        name:
          description: Name of the company to filter on
          example: SpaceX
          type: string
      type: object
      x-graphql-type-name: CompaniesFilter
    CompaniesSort:
      additionalProperties: false
      example:
        by: created_at
        direction: desc
      properties:
        by:
          description: The field on which to sort the Companies
          enum:
            - created_at
            - updated_at
            - name
          example: created_at
          type: string
          x-graphql-type-name: CompaniesSortBy
        direction:
          $ref: "#/components/schemas/SortDirection"
      required:
        - by
      type: object
      x-graphql-type-name: CompaniesSort
    Company:
      additionalProperties: false
      properties:
        abn_branch:
          description: An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
          example: "123"
          nullable: true
          title: ABN Branch
          type: string
        abn_or_tfn:
          description: An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
          example: 46 115 614 695
          nullable: true
          title: ABN or TFN
          type: string
        acn:
          description: The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
          example: XXX XXX XXX
          nullable: true
          title: ACN
          type: string
        addresses:
          items:
            $ref: "#/components/schemas/Address"
          type: array
        annual_revenue:
          description: Annual revenue
          example: +$35m
          nullable: true
          type: string
        bank_accounts:
          items:
            $ref: "#/components/schemas/BankAccount"
          type: array
        created_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          readOnly: true
          type: string
        created_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
        currency:
          example: USD
          nullable: true
          type: string
        custom_fields:
          items:
            $ref: "#/components/schemas/CustomField"
          type: array
        deleted:
          example: false
          readOnly: true
          type: boolean
        description:
          example: Space Exploration Technologies Corp. is an American aerospace manufacturer, space transportation services and communications company headquartered in Hawthorne, California.
          nullable: true
          type: string
        emails:
          items:
            $ref: "#/components/schemas/Email"
          type: array
        fax:
          example: "+12129876543"
          nullable: true
          type: string
        id:
          example: "12345"
          readOnly: true
          type: string
        image:
          example: https://www.spacex.com/static/images/share.jpg
          nullable: true
          type: string
        industry:
          description: Industry
          example: Apparel
          nullable: true
          type: string
        interaction_count:
          example: 1
          nullable: true
          readOnly: true
          type: integer
        last_activity_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        name:
          example: SpaceX
          minLength: 1
          type: string
        number_of_employees:
          description: Number of employees
          example: 500-1000
          nullable: true
          type: string
        owner_id:
          example: "12345"
          type: string
        ownership:
          description: Ownership
          example: Public
          nullable: true
          type: string
        parent_id:
          description: Parent ID
          example: "22345"
          readOnly: true
          type: string
        payee_number:
          example: 78932EN
          nullable: true
          title: Payee number
          type: string
        phone_numbers:
          items:
            $ref: "#/components/schemas/PhoneNumber"
          type: array
        read_only:
          example: false
          nullable: true
          title: Read-only
          type: boolean
        sales_tax_number:
          example: 12456EN
          nullable: true
          title: Sales tax number
          type: string
        social_links:
          items:
            $ref: "#/components/schemas/SocialLink"
          type: array
        status:
          example: Open
          minLength: 1
          nullable: true
          type: string
        tags:
          $ref: "#/components/schemas/Tags"
        updated_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          readOnly: true
          type: string
        updated_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
        vat_number:
          description: VAT number
          example: BE0689615164
          nullable: true
          type: string
        websites:
          items:
            $ref: "#/components/schemas/Website"
          type: array
      required:
        - name
      type: object
    Contact:
      additionalProperties: false
      properties:
        active:
          example: true
          nullable: true
          type: boolean
        addresses:
          items:
            $ref: "#/components/schemas/Address"
          type: array
        birthday:
          example: 2000-08-12
          nullable: true
          type: string
        company_id:
          example: "23456"
          nullable: true
          type: string
        company_name:
          example: "23456"
          nullable: true
          type: string
        created_at:
          example: 2017-08-12T20:43:21.291Z
          format: date-time
          readOnly: true
          type: string
        current_balance:
          example: 10.5
          nullable: true
          title: Current Balance
          type: number
        custom_fields:
          items:
            $ref: "#/components/schemas/CustomField"
          type: array
        department:
          example: Engineering
          nullable: true
          type: string
        description:
          example: Internal champion
          nullable: true
          title: Description
          type: string
        emails:
          items:
            $ref: "#/components/schemas/Email"
          type: array
        fax:
          example: "+12129876543"
          nullable: true
          type: string
        first_call_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        first_email_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        first_name:
          example: Elon
          nullable: true
          type: string
        gender:
          enum:
            - male
            - female
            - unisex
          example: female
          nullable: true
          type: string
        id:
          example: "12345"
          readOnly: true
          type: string
        image:
          example: https://unavatar.io/elon-musk
          nullable: true
          type: string
        language:
          description: language code according to ISO 639-1. For the United States - EN
          example: EN
          nullable: true
          type: string
        last_activity_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        last_name:
          example: Musk
          nullable: true
          type: string
        lead_id:
          example: "34567"
          nullable: true
          type: string
        lead_source:
          example: Cold Call
          minLength: 1
          nullable: true
          type: string
        middle_name:
          example: D.
          nullable: true
          type: string
        name:
          example: Elon Musk
          minLength: 1
          type: string
        owner_id:
          example: "54321"
          nullable: true
          type: string
        phone_numbers:
          items:
            $ref: "#/components/schemas/PhoneNumber"
          type: array
        prefix:
          example: Mr.
          nullable: true
          type: string
        social_links:
          items:
            $ref: "#/components/schemas/SocialLink"
          type: array
        status:
          example: open
          nullable: true
          type: string
        suffix:
          example: PhD
          nullable: true
          type: string
        tags:
          $ref: "#/components/schemas/Tags"
        title:
          example: CEO
          nullable: true
          type: string
        type:
          enum:
            - customer
            - supplier
            - employee
            - personal
          example: personal
          nullable: true
          type: string
        updated_at:
          example: 2017-08-12T20:43:21.291Z
          format: date-time
          readOnly: true
          type: string
        websites:
          items:
            $ref: "#/components/schemas/Website"
          type: array
      required:
        - name
      x-pii:
        - name
        - first_name
        - middle_name
        - last_name
        - email
    ContactsFilter:
      additionalProperties: false
      example:
        email: elon@tesla.com
        first_name: Elon
        last_name: Musk
      properties:
        email:
          description: E-mail of the contact to filter on
          example: elon@tesla.com
          type: string
        first_name:
          description: First name of the contact to filter on
          example: Elon
          type: string
        last_name:
          description: Last name of the contact to filter on
          example: Musk
          type: string
        name:
          description: Name of the contact to filter on
          example: Elon Musk
          type: string
      type: object
      x-graphql-type-name: ContactsFilter
    ContactsSort:
      additionalProperties: false
      example:
        by: created_at
        direction: desc
      properties:
        by:
          description: The field on which to sort the Contacts
          enum:
            - created_at
            - updated_at
            - name
            - first_name
            - last_name
            - email
          example: created_at
          type: string
          x-graphql-type-name: ContactsSortBy
        direction:
          $ref: "#/components/schemas/SortDirection"
      required:
        - by
      type: object
      x-graphql-type-name: ContactsSort
    CreateActivityResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: activities
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreateCompanyResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreateContactResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreateLeadResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreateNoteResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: notes
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreateOpportunityResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: opportunities
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreatePipelineResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: pipelines
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CreateUserResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: users
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    CustomField:
      additionalProperties: false
      properties:
        id:
          example: custom_technologies
          type: string
        value:
          anyOf:
            - example: Uses Salesforce and Marketo
              nullable: true
              type: string
            - example: 10
              nullable: true
              type: number
            - example: true
              nullable: true
              type: boolean
            - items:
                type: string
              type: array
      required:
        - id
      type: object
    DeleteActivityResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: activities
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    DeleteCompanyResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    DeleteContactResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    DeleteLeadResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    DeleteNoteResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: notes
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    DeleteOpportunityResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    DeletePipelineResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    DeleteUserResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: users
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    Email:
      properties:
        email:
          example: elon@musk.com
          format: email
          minLength: 1
          type: string
        id:
          example: "123"
          type: string
        type:
          enum:
            - primary
            - secondary
            - work
            - personal
            - billing
            - other
          example: primary
          type: string
          x-graphql-type-name: EmailType
      required:
        - email
      type: object
    GetActivitiesResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Activity"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: activities
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: ActivityList
    GetActivityResponse:
      properties:
        data:
          $ref: "#/components/schemas/Activity"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: activities
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: activity
    GetCompaniesResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Company"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: CompanyList
    GetCompanyResponse:
      properties:
        data:
          $ref: "#/components/schemas/Company"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: company
    GetContactResponse:
      properties:
        data:
          $ref: "#/components/schemas/Contact"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    GetContactsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Contact"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: ContactList
    GetLeadResponse:
      properties:
        data:
          $ref: "#/components/schemas/Lead"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    GetLeadsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Lead"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: LeadList
    GetNoteResponse:
      properties:
        data:
          $ref: "#/components/schemas/Note"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: notes
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: note
    GetNotesResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Note"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: notes
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: NoteList
    GetOpportunitiesResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Opportunity"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: opportunities
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: OpportunityList
    GetOpportunityResponse:
      properties:
        data:
          $ref: "#/components/schemas/Opportunity"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: opportunities
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    GetPipelineResponse:
      properties:
        data:
          $ref: "#/components/schemas/Pipeline"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: pipelines
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    GetPipelinesResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Pipeline"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: pipelines
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: PipelinesList
    GetUserResponse:
      properties:
        data:
          $ref: "#/components/schemas/User"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    GetUsersResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/User"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: users
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-graphql-type-name: UserList
    Lead:
      additionalProperties: false
      properties:
        addresses:
          items:
            $ref: "#/components/schemas/Address"
          type: array
        company_id:
          example: "2"
          nullable: true
          type: string
        company_name:
          example: Spacex
          nullable: true
          type: string
        contact_id:
          example: "2"
          nullable: true
          type: string
        created_at:
          example: 2020-09-30T07:43:32.000Z
          readOnly: true
          type: string
        currency:
          example: USD
          nullable: true
          type: string
        custom_fields:
          items:
            $ref: "#/components/schemas/CustomField"
          type: array
        description:
          example: A thinker
          nullable: true
          type: string
        emails:
          items:
            $ref: "#/components/schemas/Email"
          type: array
        fax:
          example: "+12129876543"
          nullable: true
          type: string
        first_name:
          example: Elon
          nullable: true
          type: string
        id:
          example: "12345"
          readOnly: true
          type: string
        language:
          description: language code according to ISO 639-1. For the United States - EN
          example: EN
          nullable: true
          type: string
        last_name:
          example: Musk
          nullable: true
          type: string
        lead_source:
          example: Cold Call
          nullable: true
          type: string
        monetary_amount:
          example: 75000
          nullable: true
          type: number
        name:
          example: Elon Musk
          minLength: 1
          type: string
        owner_id:
          example: "54321"
          type: string
        phone_numbers:
          items:
            $ref: "#/components/schemas/PhoneNumber"
          type: array
        prefix:
          example: Sir
          nullable: true
          type: string
        social_links:
          items:
            $ref: "#/components/schemas/SocialLink"
          type: array
        status:
          example: New
          nullable: true
          type: string
        tags:
          $ref: "#/components/schemas/Tags"
        title:
          example: CEO
          nullable: true
          type: string
        updated_at:
          example: 2020-09-30T07:43:32.000Z
          readOnly: true
          type: string
        websites:
          items:
            $ref: "#/components/schemas/Website"
          type: array
      required:
        - name
        - company_name
      x-pii:
        - name
        - email
        - first_name
        - last_name
    LeadsFilter:
      additionalProperties: false
      example:
        email: elon@tesla.com
        first_name: Elon
        last_name: Musk
      properties:
        email:
          description: E-mail of the lead to filter on
          example: elon@tesla.com
          type: string
        first_name:
          description: First name of the lead to filter on
          example: Elon
          type: string
        last_name:
          description: Last name of the lead to filter on
          example: Musk
          type: string
        name:
          description: Name of the lead to filter on
          example: Elon Musk
          type: string
      type: object
      x-graphql-type-name: LeadsFilter
    LeadsSort:
      additionalProperties: false
      example:
        by: created_at
        direction: desc
      properties:
        by:
          description: The field on which to sort the Leads
          enum:
            - created_at
            - updated_at
            - name
            - first_name
            - last_name
            - email
          example: created_at
          type: string
          x-graphql-type-name: LeadsSortBy
        direction:
          $ref: "#/components/schemas/SortDirection"
      required:
        - by
      type: object
      x-graphql-type-name: LeadsSort
    Links:
      description: Links to navigate to previous or next pages through the API
      properties:
        current:
          description: Link to navigate to the current page through the API
          example: https://unify.apideck.com/crm/companies
          type: string
        next:
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM
          nullable: true
          type: string
        previous:
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D
          nullable: true
          type: string
      type: object
    Meta:
      description: Reponse metadata
      properties:
        cursors:
          description: Cursors to navigate to previous or next pages through the API
          properties:
            current:
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
              type: string
            next:
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
              type: string
            previous:
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
              type: string
          type: object
        items_on_page:
          description: Number of items returned in the data property of the response
          example: 50
          type: integer
      type: object
    NotFoundResponse:
      properties:
        detail:
          anyOf:
            - example: "Could not find widget with id: '123'"
              type: string
            - example:
                not_found:
                  entity: widget
                  id: "123"
              type: object
          description: Contains parameter or domain specific information related to the error and why it occured.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Found
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Unknown Widget
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#entitynotfounderror
          type: string
        status_code:
          description: HTTP status code
          example: 404
          type: number
        type_name:
          description: The type of error returned
          example: EntityNotFoundError
          type: string
    NotImplementedResponse:
      properties:
        detail:
          anyOf:
            - example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.oauth2.flows'
              type: string
            - type: object
          description: Contains parameter or domain specific information related to the error and why it occured.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Implemented
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Unmapped Attribute
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#mappingerror
          type: string
        status_code:
          description: HTTP status code
          example: 501
          type: number
        type_name:
          description: The type of error returned
          example: MappingError
          type: string
    Note:
      additionalProperties: false
      properties:
        active:
          example: true
          nullable: true
          type: boolean
        company_id:
          example: "12345"
          nullable: true
          type: string
        contact_id:
          example: "12345"
          nullable: true
          type: string
        content:
          example: Office hours are 9AM-6PM
          type: string
        created_at:
          example: 2020-09-30T07:43:32.000Z
          readOnly: true
          type: string
        created_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
        id:
          example: "12345"
          readOnly: true
          type: string
        lead_id:
          example: "12345"
          nullable: true
          type: string
        opportunity_id:
          example: "12345"
          nullable: true
          type: string
        owner_id:
          example: "12345"
          type: string
        title:
          example: Meeting Notes
          type: string
        updated_at:
          example: 2020-09-30T07:43:32.000Z
          readOnly: true
          type: string
        updated_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
      type: object
    OpportunitiesFilter:
      additionalProperties: false
      example:
        monetary_amount: 75000
        status: Completed
      properties:
        monetary_amount:
          description: Monetary amount to filter on
          example: 75000
          type: number
        status:
          description: Status to filter on
          example: Completed
          type: string
        title:
          description: Title of the opportunity to filter on
          example: Tesla deal
          type: string
        win_probability:
          description: Win probability to filter on
          example: 50
          type: number
      type: object
      x-graphql-type-name: OpportunitiesFilter
    OpportunitiesSort:
      additionalProperties: false
      example:
        by: created_at
        direction: desc
      properties:
        by:
          description: The field on which to sort the Opportunities
          enum:
            - created_at
            - updated_at
            - title
            - win_probability
            - monetary_amount
            - status
          example: created_at
          type: string
          x-graphql-type-name: OpportunitiesSortBy
        direction:
          $ref: "#/components/schemas/SortDirection"
      required:
        - by
      type: object
      x-graphql-type-name: OpportunitiesSort
    Opportunity:
      additionalProperties: false
      properties:
        close_date:
          example: 2020-10-30
          format: date
          nullable: true
          type: string
        company_id:
          example: "12345"
          nullable: true
          type: string
        company_name:
          example: Copper
          nullable: true
          type: string
        contact_id:
          example: "12345"
          nullable: true
          type: string
        created_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          readOnly: true
          type: string
        created_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
        currency:
          example: USD
          nullable: true
          type: string
        custom_fields:
          items:
            $ref: "#/components/schemas/CustomField"
          type: array
        date_last_contacted:
          example: 2020-09-30T00:00:00.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        date_lead_created:
          example: 2020-09-30T00:00:00.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        date_stage_changed:
          example: 2020-09-30T00:00:00.000Z
          format: date-time
          nullable: true
          readOnly: true
          type: string
        deleted:
          example: false
          readOnly: true
          type: boolean
        description:
          example: Opportunities are created for People and Companies that are interested in buying your products or services. Create Opportunities for People and Companies to move them through one of your Pipelines.
          minLength: 1
          nullable: true
          type: string
        expected_revenue:
          description: Expected Revenue
          example: 75000
          nullable: true
          readOnly: true
          type: number
        id:
          example: "12345"
          readOnly: true
          type: string
        interaction_count:
          example: 0
          nullable: true
          readOnly: true
          type: number
        last_activity_at:
          example: 2020-09-30T07:43:32.000Z
          nullable: true
          readOnly: true
          type: string
        lead_id:
          example: "12345"
          nullable: true
          type: string
        lead_source:
          description: Lead source
          example: Website
          nullable: true
          type: string
        loss_reason:
          example: No budget
          nullable: true
          type: string
        loss_reason_id:
          example: "12345"
          nullable: true
          type: string
        monetary_amount:
          example: 75000
          nullable: true
          type: number
        owner_id:
          example: "12345"
          nullable: true
          type: string
        pipeline_id:
          example: "12345"
          nullable: true
          type: string
        pipeline_stage_id:
          example: "12345"
          nullable: true
          type: string
        primary_contact_id:
          example: "12345"
          nullable: true
          type: string
        priority:
          example: None
          minLength: 1
          nullable: true
          type: string
        source_id:
          example: "12345"
          nullable: true
          type: string
        stage_last_changed_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          nullable: true
          type: string
        status:
          example: Open
          minLength: 1
          nullable: true
          type: string
        status_id:
          example: "12345"
          nullable: true
          type: string
        tags:
          $ref: "#/components/schemas/Tags"
        title:
          example: New Rocket
          minLength: 1
          type: string
        type:
          example: Existing Customer - Upgrade
          minLength: 1
          nullable: true
          type: string
        updated_at:
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          readOnly: true
          type: string
        updated_by:
          example: "12345"
          nullable: true
          readOnly: true
          type: string
        win_probability:
          example: 40
          nullable: true
          type: number
        won_reason:
          example: Best pitch
          nullable: true
          type: string
        won_reason_id:
          example: "12345"
          nullable: true
          type: string
      required:
        - title
        - primary_contact_id
      type: object
    PaymentRequiredResponse:
      properties:
        detail:
          description: Contains parameter or domain specific information related to the error and why it occured.
          example: You have reached your limit of 2000
          type: string
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Payment Required
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Request Limit Reached
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestlimiterror
          type: string
        status_code:
          description: HTTP status code
          example: 402
          type: number
        type_name:
          description: The type of error returned
          example: RequestLimitError
          type: string
    PhoneNumber:
      properties:
        id:
          example: "12345"
          nullable: true
          type: string
        number:
          example: 111-111-1111
          minLength: 1
          type: string
        type:
          enum:
            - primary
            - secondary
            - home
            - office
            - mobile
            - assistant
            - fax
            - other
          example: primary
          type: string
          x-graphql-type-name: PhoneType
      required:
        - number
      type: object
    Pipeline:
      additionalProperties: false
      properties:
        archived:
          example: false
          type: boolean
        created_at:
          example: 2017-08-12T20:43:21.291Z
          readOnly: true
          type: string
        currency:
          example: USD
          type: string
        display_order:
          example: 1
          type: integer
        id:
          example: default
          type: string
        name:
          example: Sales Pipeline
          minLength: 1
          type: string
        stages:
          items:
            properties:
              display_order:
                example: 1
                type: integer
              id:
                example: contractsent
                readOnly: true
                type: string
              name:
                example: Contract Sent
                type: string
              value:
                example: CONTRACT_SENT
                type: string
            type: object
          type: array
        updated_at:
          example: 2017-08-12T20:43:21.291Z
          readOnly: true
          type: string
      required:
        - name
      x-pii: []
    SocialLink:
      properties:
        id:
          example: "12345"
          nullable: true
          type: string
        type:
          example: twitter
          nullable: true
          type: string
        url:
          example: https://www.twitter.com/apideck-io
          minLength: 1
          type: string
      required:
        - url
      type: object
    SortDirection:
      default: asc
      description: The direction in which to sort the results
      enum:
        - asc
        - desc
      type: string
      x-graphql-type-name: SortDirection
    Tags:
      example:
        - New
      items:
        type: string
      type: array
    UnauthorizedResponse:
      properties:
        detail:
          description: Contains parameter or domain specific information related to the error and why it occured.
          example: Failed to generate valid JWT Session. Verify applicationId is correct
          type: string
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unauthorized
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Unauthorized Request
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
          type: string
        status_code:
          description: HTTP status code
          example: 401
          type: number
        type_name:
          description: The type of error returned
          example: UnauthorizedError
          type: string
    UnexpectedErrorResponse:
      properties:
        detail:
          anyOf:
            - example: "Missing Header: x-apideck-consumer-id"
              type: string
            - example:
                missing:
                  - x-apideck-consumer-id: required
              type: object
          description: Contains parameter or domain specific information related to the error and why it occured.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Invalid Params
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
          type: string
        status_code:
          description: HTTP status code
          example: 400
          type: number
        type_name:
          description: The type of error returned
          example: RequestHeadersValidationError
          type: string
    UnifiedId:
      properties:
        id:
          example: "12345"
          readOnly: true
          type: string
      required:
        - id
      title: UnifiedId
    UnprocessableResponse:
      properties:
        detail:
          description: Contains parameter or domain specific information related to the error and why it occured.
          example: State did not include unified_api
          type: string
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unprocessable Entity
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Invalid State
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#invalidstateerror
          type: string
        status_code:
          description: HTTP status code
          example: 422
          type: number
        type_name:
          description: The type of error returned
          example: InvalidStateError
          type: string
    UpdateActivityResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: activities
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdateCompanyResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdateContactResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdateLeadResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdateNoteResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: notes
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdateOpportunityResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdatePipelineResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: pipelines
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    UpdateUserResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: companies
          type: string
        service:
          description: Apideck ID of service provider
          example: zoho-crm
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
    User:
      properties:
        created_at:
          example: 2017-08-12T20:43:21.291Z
          readOnly: true
          type: string
        email:
          example: elon@musk.com
          format: email
          minLength: 1
          type: string
        first_name:
          example: Elon
          nullable: true
          type: string
        id:
          example: "12345"
          readOnly: true
          type: string
        image:
          example: https://logo.clearbit.com/spacex.com?s=128
          nullable: true
          type: string
        language:
          example: EN
          nullable: true
          type: string
        last_name:
          example: Musk
          nullable: true
          type: string
        parent_id:
          example: "54321"
          nullable: true
          type: string
        password:
          example: supersecretpassword
          type: string
          writeOnly: true
        status:
          example: active
          nullable: true
          type: string
        updated_at:
          example: 2017-08-12T20:43:21.291Z
          readOnly: true
          type: string
        username:
          example: masterofcoin
          nullable: true
          type: string
      required:
        - email
      x-pii:
        - username
        - first_name
        - last_name
        - email
    Website:
      properties:
        id:
          example: "12345"
          nullable: true
          type: string
        type:
          enum:
            - primary
            - secondary
            - work
            - personal
            - other
          example: primary
          type: string
          x-graphql-type-name: WebsiteType
        url:
          example: http://example.com
          minLength: 1
          type: string
      required:
        - url
      type: object
  securitySchemes:
    apiKey:
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
      in: header
      name: Authorization
      type: apiKey
    applicationId:
      description: The ID of your Unify application
      in: header
      name: x-apideck-app-id
      type: apiKey
    consumerId:
      description: The ID of the consumer which you want to get or push data from
      in: header
      name: x-apideck-consumer-id
      type: apiKey
